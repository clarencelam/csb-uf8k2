{"version":3,"sources":["src/gameStats.js","src/foodSprite.js","src/clam.js","src/input.js","src/kitchen.js","src/gameMechanics.js","src/customer.js","src/thug.js","src/coin.js","src/food.js","src/tutorialPopup.js","src/endDayPopup.js","src/portal.js","src/beginDayPopup.js","src/taxMan.js","src/upgradeObject.js","src/gameManager.js","src/index.js"],"names":["GameStats","gamewidth","gameheight","daysTaxPaid","GAME_WIDTH","GAME_HEIGHT","dollars","day","timerOn","business_day_timer","advance_interval","days_dollars","days_fedcusts","days_tax","lives","display_height","display_width","display_xpos","display_ypos","text_ypos","symbol_ypos","start_xpos","sign_img","document","getElementById","coin_img","clam_img","clock_img","day_img","night_img","coin_size","sign_height","sign_width","custs","thugs","custgen_on","custgen_time","activecust_length","length","activecust_maxlength","thuggen_on","thuggen_time","activethug_length","activethug_maxlength","notax_thuggen_penalty","resetLevel","console","log","ctx","textAlign","font","fillStyle","drawImage","fillText","FoodSprite","x","y","image","food_type","x_pos","y_pos","size","marked_for_deletion","clam_x","clam_y","direction","index","deltaTime","CLAMSTATE","ACTIVE","STUNNED","DEAD","Clam","gameWidth","gameHeight","img","flipped_img","GAMEWIDTH","GAMEHEIGHT","height","width","x_speed","y_speed","bullets_held","moving_left","moving_right","moving_up","moving_down","facing","push_velocity","pushed_right","pushed_left","shooting","forEach","bullet","update","clamWithinBorders","resetPushVelocity","push","translate","scale","setTransform","drawHorizontally","i","draw","InputHandler","canvas","clam","addEventListener","event","keyCode","rect","getBoundingClientRect","clientX","left","clientY","top","Kitchen","food_img1","game_height","truck_width","truck_height","max_food","cooked_food","cooked_food_size","number_pos_x","number_pos_y","cooking","cook_time","filter","food","detectCollision","object","topOfBullet","bottomOfBullet","leftOfBullet","rightOfBullet","topOfObject","bottomOfObject","leftOfObject","rightOfObject","detectOverlapCollision","middleOfBullet","detectRectCollision","objectone","objecttwo","foodShrink","biteSize","incrementalAction","funct","millisec","terminate_function","intervalId","setInterval","clearInterval","eatFood","customer","hungerpoints","hunger_points","hunger_fill","randomIntFromInterval","min","max","Math","floor","random","CUSTSTATE","EATING","EXITING","DROPPINGLOOT","Customer","state","saturated","img_frame1","img_frame2","speed","return_speed","drop_value","markfordelete","rndBinary","rndInt","x_direction","y_direction","walking","checkOutsideBorders","newtime","s","Date","getMilliseconds","THIEFSTATE","WALKING","STEALING","STANDING","ATTACKING","Thug","img_standing","img_attack1","img_attack2","scaleup","atk_height","atk_width","randombinary","randomMovementOn","randomMovementInterval","attacking","gamestate","GAMESTATE","GAMEOVER","ENDDAY","bounceBorders","checkBorders","newtime2","s2","Coin","value","FOODSTATE","INKITCHEN","SERVED","BEINGEATEN","Food","speed_depricator","fade_time","fade_depricator","pickupable","deg","rnd_speed","save","rad","PI","rotate","restore","spinning","drawHelper","advanceSpinDegree","TutorialPopup","timerlength","taxamount","timer_length","tax_amount","screen_centered_x","screen_centered_y","box_background_color","box_outline_color","default_font","box_title","box_line1","box_line2","box_line3","box_line4","box_line5","box_line6","box_line7","box_line8","box_line9","box_line10","line","linenum","fillRect","stroke","strokeRect","drawTextLine","EndDayPopup","numFed","numCoins","tax","screen_bottom_y","Portal","gotogamestate","gogamestate","BeginDayPopup","daynumber","day_number","TaxMan","popup_x","popup_y","popup_width","popup_height","line1","line2","line3","line4","UPGRADETYPES","MARKETING","LOGICSTICS","UpgradeObject","type","gamestats","kitchen","box_height","box_width","box_x","box_y","stat_level","cost","cost_increment","incrementseconds","stat_maxlevel","hovermsg1","hovermsg2","hovermsg3","BUSINESSDAY","NIGHT","MENU","TUTORIAL","NEXTLEVEL","TAXHOUSE","INHOME","INCITY1","INHOOD_NIGHT","INHOOD_DAY","UPGRADEROOM","RESTO","INCITY2","GameManager","background","night_bg","nighttown1","nighttown2","car","hood_bg","hood_bg_day","spacebarHandler","gameStats","bullets","coins","popups","npcs","customers","portals","upgrades","thug","initializeThugRandomMovement","updateThugs","updateCustomers","checkClamGettingFood","updateBullets","coin","updateCoins","goToGamestate","cust","npc","checkTaxMan","upgradeobj","onHover","shift","payTaxMan","checkAndTriggerPortals","upgrade","eraseObjects","gameOver","initializeCooking","initializeTimer","initializeCustomers","initializeThugs","start","cookOneFood","incrementLevel","thecustomer","foodBeingEaten","dropCoin","thebullet","triggerCustEatingFood","prepAttack","setTimeout","portal","getGamestate","eat_interval","takeBite","biteShrink","shrinkAmount","newBullet","taxguy","drawPopup","incrementTime","startDayTimer","startRandomMovement","randomInt","init_custs","genCusts","rndInteger","init_thugs","genThugs","time","kitchenCooking","cookFood","getContext","lastTime","fpsInterval","game","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.2275915b.js","sourceRoot":"..","sourcesContent":["export default class GameStats {\r\n  constructor(gamewidth, gameheight) {\r\n    this.daysTaxPaid = false;\r\n    this.GAME_WIDTH = gamewidth;\r\n    this.GAME_HEIGHT = gameheight;\r\n\r\n    this.dollars = 0;\r\n    this.day = 1;\r\n\r\n    this.timerOn = false;\r\n    this.business_day_timer = 30;\r\n\r\n    this.advance_interval = 1000; //one second = two minute passes in timer\r\n\r\n    this.days_dollars = 0;\r\n    this.days_fedcusts = 0;\r\n    this.days_tax = 2;\r\n    this.lives = 3;\r\n\r\n    this.display_height = 40;\r\n    this.display_width = 400;\r\n    this.display_xpos = 0;\r\n    this.display_ypos = 0;\r\n    this.text_ypos = this.display_ypos + 75;\r\n    this.symbol_ypos = this.display_ypos + 50;\r\n    this.start_xpos = 210;\r\n\r\n    this.sign_img = document.getElementById(\"sign\");\r\n    this.coin_img = document.getElementById(\"coin_img\");\r\n    this.clam_img = document.getElementById(\"clam_default\");\r\n    this.clock_img = document.getElementById(\"clock\");\r\n    this.day_img = document.getElementById(\"day\");\r\n    this.night_img = document.getElementById(\"night\");\r\n\r\n    this.coin_size = 25;\r\n    this.sign_height = 60;\r\n    this.sign_width = 600;\r\n\r\n    this.custs = [];\r\n    this.thugs = [];\r\n\r\n    this.custgen_on = false;\r\n    this.custgen_time = 2000;\r\n    this.activecust_length = this.custs.length;\r\n    this.activecust_maxlength = 15;\r\n\r\n    this.thuggen_on = false;\r\n    this.thuggen_time = 5000;\r\n    this.activethug_length = this.thugs.length;\r\n    this.activethug_maxlength = 15;\r\n\r\n    this.notax_thuggen_penalty = -250; // At GAMESTATE.NEXTLEVEL, if user has not paid days tax, apply this penalty to thuggen_time\r\n  }\r\n\r\n  resetLevel() {\r\n    // perform the reset of objects needed to go to another level\r\n    this.custs = [];\r\n    this.thugs = [];\r\n\r\n    this.days_dollars = 0;\r\n    this.days_fedcusts = 0;\r\n    this.timerOn = false;\r\n    this.business_day_timer = 30;\r\n    this.daysTaxPaid = false;\r\n  }\r\n\r\n  gameOver() {\r\n    // perform reset of objects needed to reset game\r\n    this.custs = [];\r\n    this.thugs = [];\r\n\r\n    this.day = 1;\r\n    this.dollars = 0;\r\n    this.days_tax = 2;\r\n    this.lives = 10;\r\n    this.thuggen_time = 1000;\r\n\r\n    this.resetLevel();\r\n  }\r\n\r\n  incrementLevel() {\r\n    // Increment objects to make the next level harder\r\n    this.days_tax = this.days_tax + 1;\r\n    this.day++;\r\n\r\n    if (this.daysTaxPaid === false) {\r\n      this.thuggen_time = this.thuggen_time + this.notax_thuggen_penalty;\r\n      console.log(\"Current thug gen time: \" + this.thuggen_time);\r\n    }\r\n  }\r\n\r\n  update() {}\r\n  draw(ctx) {\r\n    ctx.textAlign = \"right\";\r\n    ctx.font = \"25px Tahoma\";\r\n    ctx.fillStyle = \"black\";\r\n    ctx.drawImage(this.sign_img, this.display_xpos, this.display_ypos);\r\n\r\n    // DRAW # COINS\r\n    ctx.drawImage(\r\n      this.coin_img,\r\n      this.start_xpos,\r\n      this.symbol_ypos,\r\n      this.coin_size,\r\n      this.coin_size\r\n    );\r\n    ctx.fillText(this.dollars, this.start_xpos + 120, this.text_ypos);\r\n\r\n    // DRAW BUSINESS DAY TIMER\r\n    ctx.drawImage(\r\n      this.clock_img,\r\n      this.start_xpos + 205,\r\n      this.symbol_ypos,\r\n      this.coin_size,\r\n      this.coin_size\r\n    );\r\n    ctx.fillText(\r\n      this.business_day_timer,\r\n      this.start_xpos + 280,\r\n      this.text_ypos\r\n    );\r\n\r\n    // DRAW LIVES LEFT\r\n    ctx.drawImage(\r\n      this.clam_img,\r\n      this.start_xpos + 350,\r\n      this.symbol_ypos,\r\n      30,\r\n      30\r\n    );\r\n    ctx.fillText(this.lives, this.start_xpos + 420, this.text_ypos);\r\n\r\n    // DRAW DAY #\r\n    ctx.drawImage(\r\n      this.day_img,\r\n      this.start_xpos + 790,\r\n      this.symbol_ypos,\r\n      30,\r\n      30\r\n    );\r\n    ctx.fillText(\"DAY \" + this.day, this.start_xpos + 900, this.text_ypos);\r\n  }\r\n}\r\n\r\n/*\r\n\r\n    ctx.fillRect(\r\n      this.display_xpos,\r\n      this.display_ypos,\r\n      this.display_width,\r\n      this.display_height\r\n    );\r\n*/\r\n","export default class FoodSprite {\r\n  // Class to represent the food objects used as bullets in the game\r\n  constructor(x, y) {\r\n    this.image = document.getElementById(\"nigiri_img\");\r\n\r\n    this.food_type = \"nigiri\";\r\n\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.size = 25;\r\n    this.marked_for_deletion = false;\r\n  }\r\n\r\n  update(clam_x, clam_y, direction, index, deltaTime) {\r\n    // update sprite to follow clam object\r\n    if (direction === 1) {\r\n      this.x_pos = clam_x + 15 + this.size / 2 - (index * this.size) / 3;\r\n      this.y_pos = clam_y + index ** 2;\r\n    } else {\r\n      this.x_pos = clam_x + 15 + this.size / 2 + (index * this.size) / 3;\r\n      this.y_pos = clam_y + index ** 2;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(this.image, this.x_pos, this.y_pos, this.size, this.size);\r\n  }\r\n}\r\n","import FoodSprite from \"/src/foodSprite\";\r\n\r\nexport const CLAMSTATE = {\r\n  ACTIVE: 0,\r\n  STUNNED: 1,\r\n  DEAD: 2\r\n};\r\n\r\nexport default class Clam {\r\n  constructor(gameWidth, gameHeight) {\r\n    this.img = document.getElementById(\"clam_default\");\r\n    this.flipped_img = document.getElementById(\"clam_flipped\");\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.GAMEHEIGHT = gameHeight;\r\n    this.x_pos = gameWidth / 2 + 10;\r\n    this.y_pos = gameHeight - 100;\r\n\r\n    this.size = 75;\r\n    this.height = 75; // specific width/height values for rect collision detection\r\n    this.width = 75;\r\n    this.x_speed = 5;\r\n    this.y_speed = 4;\r\n\r\n    this.bullets_held = []; // # of food in hand to fire as bullets\r\n\r\n    this.moving_left = false;\r\n    this.moving_right = false;\r\n    this.moving_up = false;\r\n    this.moving_down = false;\r\n\r\n    this.facing = 1; // 1 = facing right, -1 = facing left\r\n\r\n    this.push_velocity = 30;\r\n    this.pushed_right = false;\r\n    this.pushed_left = false;\r\n    this.shooting = false;\r\n  }\r\n\r\n  resetPushVelocity() {\r\n    this.push_velocity = 30;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (!deltaTime) return;\r\n\r\n    if (this.moving_left === true && this.x_pos > 0) {\r\n      this.x_pos = this.x_pos - this.x_speed;\r\n      this.facing = -1; // set facing left\r\n    }\r\n    if (this.moving_right === true && this.x_pos < this.GAMEWIDTH - this.size) {\r\n      this.x_pos = this.x_pos + this.x_speed;\r\n      this.facing = 1; // set facing right\r\n    }\r\n    if (this.moving_up === true && this.y_pos > 0) {\r\n      this.y_pos = this.y_pos - this.y_speed;\r\n    }\r\n    if (this.moving_down === true && this.y_pos < this.GAMEHEIGHT - this.size) {\r\n      this.y_pos = this.y_pos + this.y_speed;\r\n    }\r\n\r\n    // update\r\n    this.bullets_held.forEach((bullet, index) => {\r\n      bullet.update(this.x_pos, this.y_pos, this.facing, index);\r\n    });\r\n\r\n    if (this.clamWithinBorders() === false) {\r\n      this.pushed_left = false;\r\n      this.pushed_right = false;\r\n    }\r\n\r\n    if (this.pushed_right === true) {\r\n      this.x_pos = this.x_pos + this.push_velocity;\r\n      this.push_velocity = this.push_velocity - 1;\r\n      this.moving_left = false;\r\n      if (this.push_velocity === 0) {\r\n        this.pushed_right = false;\r\n        this.resetPushVelocity();\r\n      }\r\n    } else if (this.pushed_left === true) {\r\n      this.x_pos = this.x_pos - this.push_velocity;\r\n      this.push_velocity = this.push_velocity - 1;\r\n      this.moving_right = false;\r\n      if (this.push_velocity === 0) {\r\n        this.pushed_left = false;\r\n        this.resetPushVelocity();\r\n      }\r\n    }\r\n  }\r\n\r\n  clamWithinBorders() {\r\n    if (\r\n      this.x_pos > 0 &&\r\n      this.x_pos + this.width < this.GAMEWIDTH &&\r\n      this.y_pos > 0 &&\r\n      this.y_pos + this.height < this.GAMEHEIGHT\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  newBullet() {\r\n    this.bullets_held.push(new FoodSprite(this.x_pos, this.y_pos));\r\n  }\r\n\r\n  /*\r\n  drawShootingTilt(ctx, deg) {\r\n    ctx.save();\r\n    var rad = (deg * Math.PI) / 180;\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(rad);\r\n\r\n    ctx.drawImage(\r\n      this.img,\r\n      (this.size / 2) * -1,\r\n      (this.size / 2) * -1,\r\n      this.size,\r\n      this.size\r\n    );\r\n    ctx.restore();\r\n  }\r\n  */\r\n\r\n  drawHorizontally(ctx, x_pos) {\r\n    ctx.translate(x_pos + this.size, this.y_pos);\r\n    ctx.scale(-1, 1);\r\n    ctx.drawImage(this.img, 0, 0, this.size, this.size);\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n  }\r\n\r\n  draw(ctx) {\r\n    // Draw the clam to the screen. If it is shooting, draw its shooting animation\r\n    switch (true) {\r\n      case this.facing === 1: // facing right, not shooting\r\n        ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n        break;\r\n      case this.facing === -1: // facing left, shooting\r\n        this.drawHorizontally(ctx, this.x_pos);\r\n        break;\r\n      default:\r\n        ctx.drawImage(this.img, this.x_pos, this.y_pos, this.size, this.size);\r\n    }\r\n    ctx.fillText(\r\n      \"Food held:\" + this.bullets_held.length,\r\n      this.x_pos,\r\n      this.y_pos\r\n    );\r\n\r\n    /*\r\n    // draw food sprites\r\n    this.bullets_held.forEach((bullet, index) => {\r\n      bullet.draw(ctx);\r\n    });\r\n    */\r\n    for (var i = this.bullets_held.length - 1; i >= 0; i--) {\r\n      this.bullets_held[i].draw(ctx);\r\n    }\r\n  }\r\n}\r\n","export default class InputHandler {\r\n  constructor(canvas, clam) {\r\n    this.canvas = canvas;\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = true;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = true;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = true;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = true;\r\n          break;\r\n        // NOTE: Spacebar actions are handled in GameManager.spacebarHandler()\r\n        default:\r\n      }\r\n    });\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      switch (event.keyCode) {\r\n        case 37:\r\n          clam.moving_left = false;\r\n          break;\r\n        case 39:\r\n          clam.moving_right = false;\r\n          break;\r\n        case 38:\r\n          clam.moving_up = false;\r\n          break;\r\n        case 40:\r\n          clam.moving_down = false;\r\n          break;\r\n        case 32:\r\n          break;\r\n        default:\r\n      }\r\n    });\r\n    // click listener\r\n    document.addEventListener(\"click\", (event) => {\r\n      let rect = canvas.getBoundingClientRect();\r\n      let x = event.clientX - rect.left;\r\n      let y = event.clientY - rect.top;\r\n      console.log(\"clickX: \" + x + \"clickY: \" + y);\r\n    });\r\n  }\r\n}\r\n","export default class Kitchen {\r\n  // Class to represent the food objects used as bullets in the game\r\n  constructor(gameWidth, gameHeight) {\r\n    this.image = document.getElementById(\"foodstand\");\r\n    this.food_img1 = document.getElementById(\"nigiri_img\");\r\n    this.game_height = gameHeight;\r\n\r\n    this.truck_width = 375;\r\n    this.truck_height = 200;\r\n\r\n    this.x_pos = 100;\r\n    this.y_pos = 112;\r\n\r\n    this.max_food = 5;\r\n    this.cooked_food = [];\r\n\r\n    this.size = 400;\r\n    this.cooked_food_size = 50;\r\n\r\n    this.number_pos_x = 40;\r\n    this.number_pos_y = gameHeight * (2 / 3);\r\n\r\n    this.cooking = false;\r\n    this.cook_time = 2000;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    this.cooked_food = this.cooked_food.filter(\r\n      (bullet) => !bullet.marked_for_deletion\r\n    );\r\n\r\n    this.cooked_food.forEach((food, index) => {\r\n      food.update();\r\n    });\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.x_pos,\r\n      this.y_pos,\r\n      this.truck_width,\r\n      this.truck_height\r\n    );\r\n    this.cooked_food.forEach((food, index) => {\r\n      food.draw(ctx);\r\n    });\r\n  }\r\n}\r\n/*\r\n    ctx.textAlign = \"left\";\r\n    ctx.font = \"25px Tahoma\";\r\n    ctx.fillStyle = \"black\";\r\n*/\r\n","// function detectCollision returns true if bullet is within object\r\nexport function detectCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.size;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.size;\r\n\r\n  if (\r\n    bottomOfBullet > topOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet < bottomOfObject &&\r\n    rightOfBullet > leftOfObject &&\r\n    leftOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function detectOverlapCollision(bullet, object) {\r\n  let topOfBullet = bullet.y_pos;\r\n  let bottomOfBullet = bullet.y_pos + bullet.size;\r\n  let leftOfBullet = bullet.x_pos;\r\n  let rightOfBullet = bullet.x_pos + bullet.size;\r\n  let middleOfBullet = bullet.x_pos + bullet.size / 2;\r\n\r\n  let topOfObject = object.y_pos;\r\n  let bottomOfObject = object.y_pos + object.height;\r\n  let leftOfObject = object.x_pos;\r\n  let rightOfObject = object.x_pos + object.width;\r\n\r\n  if (\r\n    bottomOfBullet > topOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet < bottomOfObject &&\r\n    middleOfBullet > leftOfObject &&\r\n    middleOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function detectRectCollision(objectone, objecttwo) {\r\n  let topOfBullet = objectone.y_pos;\r\n  let bottomOfBullet = objectone.y_pos + objectone.height;\r\n  let leftOfBullet = objectone.x_pos;\r\n  let rightOfBullet = objectone.x_pos + objectone.width;\r\n\r\n  let topOfObject = objecttwo.y_pos;\r\n  let bottomOfObject = objecttwo.y_pos + objecttwo.height;\r\n  let leftOfObject = objecttwo.x_pos;\r\n  let rightOfObject = objecttwo.x_pos + objecttwo.width;\r\n\r\n  if (\r\n    bottomOfBullet > topOfObject && // bottom of bullet is under the top of obj\r\n    topOfBullet < bottomOfObject &&\r\n    rightOfBullet > leftOfObject &&\r\n    leftOfBullet < rightOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function foodShrink(bullet) {\r\n  const biteSize = 10;\r\n  bullet.size = bullet.size - biteSize;\r\n  bullet.x_pos = bullet.x_pos + biteSize / 2;\r\n  bullet.y_pos = bullet.y_pos + biteSize / 2;\r\n}\r\n\r\nexport function incrementalAction(funct, millisec, terminate_function) {\r\n  var intervalId = setInterval(funct, millisec);\r\n  if (terminate_function) {\r\n    clearInterval(intervalId);\r\n  }\r\n}\r\n\r\nexport function eatFood(customer, bullet) {\r\n  customer.hungerpoints = customer.hunger_points - bullet.hunger_fill;\r\n}\r\n\r\nexport function randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import { randomIntFromInterval, incrementalAction } from \"/src/gameMechanics\";\r\n\r\nexport const CUSTSTATE = {\r\n  ACTIVE: 0,\r\n  EATING: 1,\r\n  EXITING: 2,\r\n  DROPPINGLOOT: 3\r\n};\r\n\r\nexport default class Customer {\r\n  // class to represent the cusomter fish that player will feed\r\n\r\n  constructor(gameWidth, gameHeight) {\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.GAMEHEIGHT = gameHeight;\r\n    this.state = CUSTSTATE.ACTIVE;\r\n    this.saturated = false;\r\n\r\n    this.img_frame1 = document.getElementById(\"cust_baseA\");\r\n    this.img_frame2 = document.getElementById(\"cust_baseB\");\r\n\r\n    this.height = 25 + 8;\r\n    this.width = 37 + 8;\r\n\r\n    this.speed = 3;\r\n    this.return_speed = 4; // applies on CUSTSTATE.DONEEATING\r\n\r\n    this.hunger_points = 2;\r\n    this.drop_value = 1;\r\n\r\n    this.markfordelete = false;\r\n\r\n    this.min = 300;\r\n    this.max = gameHeight;\r\n\r\n    this.rndBinary = randomIntFromInterval(1, 2);\r\n    const rndInt = randomIntFromInterval(this.min, this.max);\r\n\r\n    if (this.rndBinary === 1) {\r\n      this.x_pos = gameWidth - this.width; // Start on right side\r\n    } else {\r\n      this.x_pos = 0; // Start on left side\r\n    }\r\n    this.y_pos = rndInt;\r\n\r\n    if (this.rndBinary === 1) {\r\n      this.x_direction = -1;\r\n    } else {\r\n      this.x_direction = 1;\r\n    }\r\n    this.y_direction = 0; //no vertical movement to start\r\n  }\r\n\r\n  update(deltaTime) {\r\n    // Movement\r\n    this.x_pos = this.x_pos + this.speed * this.x_direction;\r\n    this.y_pos = this.y_pos + this.speed * this.y_direction;\r\n\r\n    if (this.state === CUSTSTATE.EATING) {\r\n      this.walking = false;\r\n      this.speed = 0;\r\n    }\r\n\r\n    if (this.state === CUSTSTATE.EXITING) {\r\n      this.walking = true;\r\n      this.y_direction = -1;\r\n      this.speed = this.return_speed;\r\n    }\r\n\r\n    // CHECK DELETE\r\n    this.checkOutsideBorders();\r\n  }\r\n\r\n  draw(ctx) {\r\n    // swap the image frames per second when cust is walking\r\n    const newtime = new Date();\r\n    let s = newtime.getMilliseconds();\r\n    if (this.state === CUSTSTATE.ACTIVE || this.state === CUSTSTATE.EXITING) {\r\n      if (s < 500) {\r\n        this.img = this.img_frame1;\r\n      } else {\r\n        this.img = this.img_frame2;\r\n      }\r\n    }\r\n\r\n    if (this.rndBinary === 2) {\r\n      // GENERATE CUSTOMER FACING RIGHT\r\n      ctx.translate(this.x_pos + this.width, this.y_pos);\r\n      // scaleX by -1; this \"trick\" flips horizontally\r\n      ctx.scale(-1, 1);\r\n      // draw the img\r\n      // no need for x,y since we've already translated\r\n      ctx.drawImage(this.img, 0, 0, this.width, this.height);\r\n      // always clean up -- reset transformations to default\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n    } else {\r\n      // GENERATE CUSTOMER FACING LEFT\r\n      ctx.drawImage(this.img, this.x_pos, this.y_pos, this.width, this.height);\r\n    }\r\n  }\r\n\r\n  checkOutsideBorders() {\r\n    // Delete customers when they cross the screen & exit\r\n    if (\r\n      (this.x_pos > this.GAMEWIDTH && this.x_direction === 1) ||\r\n      (this.x_pos + this.width < 0 && this.x_direction === -1) ||\r\n      this.y_pos < 0\r\n    ) {\r\n      this.markfordelete = true;\r\n    }\r\n  }\r\n}\r\n","import { GAMESTATE } from \"./gameManager\";\r\nimport { randomIntFromInterval } from \"/src/gameMechanics\";\r\n\r\nexport const THIEFSTATE = {\r\n  WALKING: 0,\r\n  STEALING: 1,\r\n  STANDING: 2,\r\n  EXITING: 3,\r\n  ATTACKING: 4\r\n};\r\n\r\nexport default class Thug {\r\n  // class to represent the cusomter fish that player will feed\r\n  constructor(gameWidth, gameHeight) {\r\n    this.GAMEWIDTH = gameWidth;\r\n    this.GAMEHEIGHT = gameHeight;\r\n    this.state = THIEFSTATE.WALKING;\r\n\r\n    this.img_frame1 = document.getElementById(\"thugA1\");\r\n    this.img_frame2 = document.getElementById(\"thugA2\");\r\n    this.img_standing = document.getElementById(\"thugA3\");\r\n    this.img_attack1 = document.getElementById(\"thugA4\");\r\n    this.img_attack2 = document.getElementById(\"thugA5\");\r\n\r\n    this.scaleup = 20;\r\n    this.height = 65 + this.scaleup;\r\n    this.width = 60 + this.scaleup;\r\n    this.atk_height = 80 + this.scaleup;\r\n    this.atk_width = 90 + this.scaleup;\r\n\r\n    this.speed = 2;\r\n    this.x_direction = 1;\r\n    this.y_direction = 1;\r\n\r\n    this.img = document.getElementById(\"thugA1\");\r\n\r\n    this.y_pos = 700;\r\n\r\n    this.randombinary = randomIntFromInterval(1, 2);\r\n    if (this.randombinary === 1) {\r\n      this.x_pos = 1;\r\n    } else {\r\n      this.x_pos = this.GAMEWIDTH - this.width;\r\n    }\r\n\r\n    this.markfordelete = false;\r\n\r\n    this.randomMovementOn = false;\r\n    this.randomMovementInterval = 3000;\r\n\r\n    this.attacking = false;\r\n  }\r\n\r\n  prepAttack() {\r\n    this.img = this.img_attack1;\r\n  }\r\n\r\n  goBackWalking() {\r\n    this.randomMovementOn = true;\r\n    this.attacking = false;\r\n    this.state = THIEFSTATE.WALKING;\r\n    console.log(\"thug should go Back Walking, ready for next attack\");\r\n  }\r\n\r\n  update(gamestate) {\r\n    // check if thug is stopped\r\n    if (gamestate === GAMESTATE.GAMEOVER) {\r\n      this.state = THIEFSTATE.STANDING;\r\n    } else if (gamestate === GAMESTATE.ENDDAY) {\r\n      this.state = THIEFSTATE.EXITING;\r\n    }\r\n    switch (this.state) {\r\n      case THIEFSTATE.WALKING:\r\n        this.attacking = false;\r\n        this.bounceBorders();\r\n\r\n        this.x_pos = this.x_pos + this.speed * this.x_direction;\r\n        this.y_pos = this.y_pos + this.speed * this.y_direction;\r\n\r\n        const newtime = new Date();\r\n        let s = newtime.getMilliseconds();\r\n        if (s < 500) {\r\n          this.img = this.img_frame1;\r\n        } else {\r\n          this.img = this.img_frame2;\r\n        }\r\n        break;\r\n\r\n      case THIEFSTATE.ATTACKING:\r\n        break;\r\n\r\n      case THIEFSTATE.STANDING:\r\n        this.img = this.img_standing;\r\n        break;\r\n\r\n      case THIEFSTATE.EXITING:\r\n        this.attacking = false;\r\n        this.x_pos = this.x_pos + this.speed * this.x_direction; // get thief to exit\r\n        this.y_pos = this.y_pos; // stop y movement\r\n\r\n        if (this.checkBorders() === true) {\r\n          this.markfordelete = true;\r\n        }\r\n\r\n        if (this.x_direction === 0) {\r\n          this.img = this.img_standing;\r\n        } else {\r\n          const newtime2 = new Date();\r\n          let s2 = newtime2.getMilliseconds();\r\n          if (s2 < 500) {\r\n            this.img = this.img_frame1;\r\n          } else {\r\n            this.img = this.img_frame2;\r\n          }\r\n        }\r\n\r\n        break;\r\n\r\n      default:\r\n      //\r\n    }\r\n  }\r\n\r\n  bounceBorders() {\r\n    if (this.x_pos <= 0) {\r\n      this.x_direction = this.x_direction * -1;\r\n    }\r\n    if (this.x_pos + this.width >= this.GAMEWIDTH) {\r\n      this.x_direction = this.x_direction * -1;\r\n    }\r\n    if (this.y_pos <= 0) {\r\n      this.y_direction = this.y_direction * -1;\r\n    }\r\n    if (this.y_pos + this.height >= this.GAMEHEIGHT) {\r\n      this.y_direction = this.y_direction * -1;\r\n    }\r\n  }\r\n\r\n  checkBorders() {\r\n    if (this.x_pos <= 0) {\r\n      return true;\r\n    } else if (this.x_pos + this.width >= this.GAMEWIDTH) {\r\n      return true;\r\n    } else if (this.y_pos <= 0) {\r\n      return true;\r\n    } else if (this.y_pos + this.height >= this.GAMEHEIGHT) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    // swap the image frames per second when cust is walking\r\n    if (this.state === THIEFSTATE.ATTACKING) {\r\n      if (this.x_direction === 1) {\r\n        ctx.translate(this.x_pos + this.atk_width, this.y_pos);\r\n        ctx.scale(-1, 1);\r\n        ctx.drawImage(this.img, 0, 0, this.atk_width, this.atk_height);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        ctx.drawImage(\r\n          this.img,\r\n          this.x_pos,\r\n          this.y_pos,\r\n          this.atk_width,\r\n          this.atk_height\r\n        );\r\n      }\r\n    } else {\r\n      if (this.x_direction === 1) {\r\n        ctx.translate(this.x_pos + this.width, this.y_pos);\r\n        ctx.scale(-1, 1);\r\n        ctx.drawImage(this.img, 0, 0, this.width, this.height);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      } else {\r\n        ctx.drawImage(\r\n          this.img,\r\n          this.x_pos,\r\n          this.y_pos,\r\n          this.width,\r\n          this.height\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","export default class Coin {\r\n  // Class to represent coin objects\r\n  constructor(x, y, value) {\r\n    this.image = document.getElementById(\"coin_img\");\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.size = 25;\r\n    this.marked_for_deletion = false;\r\n    this.value = value;\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(this.image, this.x_pos, this.y_pos, 25, 25);\r\n  }\r\n\r\n  update(deltaTime) {\r\n    return;\r\n  }\r\n}\r\n","import { randomIntFromInterval } from \"/src/gameMechanics\";\r\n\r\nexport const FOODSTATE = {\r\n  INKITCHEN: 0,\r\n  SERVED: 1,\r\n  BEINGEATEN: 2\r\n};\r\n\r\nexport default class Food {\r\n  // Class to represent the food objects used as bullets in the game\r\n  constructor(x, y, facing, state = FOODSTATE.SERVED, kitchen) {\r\n    this.state = state;\r\n\r\n    this.image = document.getElementById(\"nigiri_img\");\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.size = 50;\r\n    this.speed = 10;\r\n\r\n    this.speed_depricator = 0.2;\r\n    this.fade_time = 180;\r\n\r\n    this.fade_depricator = 1;\r\n    this.marked_for_deletion = false;\r\n\r\n    this.hunger_fill = 1;\r\n    this.pickupable = false;\r\n\r\n    this.direction = facing; // 1 if right, -1 if left\r\n\r\n    this.deg = 0;\r\n\r\n    if (this.state === FOODSTATE.INKITCHEN) {\r\n      let rnd_speed = randomIntFromInterval(2, 9);\r\n      this.speed = rnd_speed;\r\n    }\r\n  }\r\n\r\n  resetStats() {\r\n    this.speed = 10;\r\n  }\r\n\r\n  advanceSpinDegree() {\r\n    // increases the degree of this.deg to spin food\r\n    this.deg = this.deg + 2;\r\n  }\r\n\r\n  drawHelper(ctx) {\r\n    // draws food with tilt degree = this.deg\r\n    ctx.save();\r\n    var rad = (this.deg * Math.PI) / 180;\r\n    ctx.translate(this.x_pos + this.size / 2, this.y_pos + this.size / 2);\r\n    ctx.rotate(rad);\r\n    ctx.drawImage(\r\n      this.image,\r\n      (this.size / 2) * -1,\r\n      (this.size / 2) * -1,\r\n      this.size,\r\n      this.size\r\n    );\r\n    ctx.restore();\r\n  }\r\n\r\n  draw(ctx) {\r\n    if (this.spinning === true) {\r\n      // draw food and advance spin\r\n      this.drawHelper(ctx);\r\n      this.advanceSpinDegree();\r\n    } else {\r\n      // draw food no spin\r\n      this.drawHelper(ctx);\r\n    }\r\n  }\r\n\r\n  update(deltaTime) {\r\n    this.x_pos += this.speed * this.direction;\r\n    if (this.speed > 0) {\r\n      this.speed = this.speed - this.speed_depricator;\r\n    } else {\r\n      this.speed = 0;\r\n    }\r\n\r\n    if (this.state === FOODSTATE.SERVED) {\r\n      this.spinning = true;\r\n      this.pickupable = true;\r\n\r\n      if (this.fade_time > 0) {\r\n        this.fade_time = this.fade_time - this.fade_depricator;\r\n      } else {\r\n        this.fade_time = 0;\r\n        this.marked_for_deletion = true;\r\n      }\r\n    }\r\n\r\n    if (this.state === FOODSTATE.BEINGEATEN) {\r\n      this.speed = 0;\r\n      this.spinning = false;\r\n      this.pickupable = false;\r\n    }\r\n  }\r\n}\r\n","export default class TutorialPopup {\r\n  // Class to represent the popup at the end of a level\r\n  constructor(gamewidth, gameheight, timerlength, taxamount) {\r\n    this.gamewidth = gamewidth;\r\n    this.gameheight = gameheight;\r\n    this.height = 380;\r\n    this.width = 800;\r\n    this.timer_length = timerlength;\r\n    this.tax_amount = taxamount;\r\n\r\n    this.screen_centered_x = this.gamewidth / 2;\r\n    this.screen_centered_y = this.gameheight / 2;\r\n\r\n    this.box_background_color = \"#B3EFF7\";\r\n    this.box_outline_color = \"black\";\r\n    this.default_font = \"20px Tahoma\";\r\n\r\n    this.box_title = \"WELCOME TO CHEF CLAM\";\r\n    this.box_line1 = \"You've come to Maple Island with a humble dream:\";\r\n    this.box_line2 =\r\n      \"To make a living cooking food and serving it to the community\";\r\n    this.box_line3 = \"INSTRUCTIONS:\";\r\n    this.box_line4 = \"Move with ARROW KEYS or WASD. Throw items with SPACEBAR\";\r\n    this.box_line5 =\r\n      \"Collect food from your food truck and feed as many customers as you can!\";\r\n    this.box_line6 = \"But make sure you make enough money to pay the tax.\";\r\n    this.box_line7 =\r\n      \"And be careful for thieves-- a rock or two should keep them away\";\r\n    this.box_line8 = \"TODAY'S WORKDAY: \" + this.timer_length + \" SECONDS\";\r\n    this.box_line9 = \"TAX OWED AT END OF DAY: \" + this.tax_amount + \" DOLLARS\";\r\n    this.box_line10 = \"Walk RIGHT to begin the workday\";\r\n  }\r\n\r\n  drawTextLine(ctx, line, linenum) {\r\n    ctx.fillText(\r\n      line,\r\n      this.screen_centered_x,\r\n      this.screen_centered_y - this.height / 2 + 30 * linenum\r\n    );\r\n  }\r\n\r\n  draw(ctx) {\r\n    // draw box to put info in\r\n    ctx.fillStyle = this.box_background_color;\r\n    ctx.fillRect(\r\n      this.screen_centered_x - this.width / 2,\r\n      this.screen_centered_y - this.height / 2,\r\n      this.width,\r\n      this.height\r\n    );\r\n    ctx.stroke();\r\n\r\n    // draw outline for box\r\n    ctx.fillStyle = this.box_outline_color;\r\n    ctx.strokeRect(\r\n      this.screen_centered_x - this.width / 2,\r\n      this.screen_centered_y - this.height / 2,\r\n      this.width,\r\n      this.height\r\n    );\r\n\r\n    ctx.font = this.default_font;\r\n    ctx.textAlign = \"center\";\r\n\r\n    this.drawTextLine(ctx, this.box_title, 1);\r\n    this.drawTextLine(ctx, this.box_line1, 2);\r\n    this.drawTextLine(ctx, this.box_line2, 3);\r\n    this.drawTextLine(ctx, this.box_line3, 4);\r\n    this.drawTextLine(ctx, this.box_line4, 5);\r\n    this.drawTextLine(ctx, this.box_line5, 6);\r\n    this.drawTextLine(ctx, this.box_line6, 7);\r\n    this.drawTextLine(ctx, this.box_line7, 8);\r\n    this.drawTextLine(ctx, this.box_line8, 9);\r\n    this.drawTextLine(ctx, this.box_line9, 10);\r\n    this.drawTextLine(ctx, this.box_line10, 11);\r\n  }\r\n}\r\n","export default class EndDayPopup {\r\n  // Class to represent the popup at the end of a level\r\n  constructor(gamewidth, gameheight, numFed, numCoins, tax) {\r\n    this.gamewidth = gamewidth;\r\n    this.gameheight = gameheight;\r\n    this.height = 180;\r\n    this.width = 700;\r\n    this.box_title = \"BUSINESS DAY OVER\";\r\n    this.numFed = numFed;\r\n    this.numCoins = numCoins;\r\n    this.tax = tax;\r\n\r\n    this.screen_centered_x = this.gamewidth / 2 - this.width / 2;\r\n    this.screen_centered_y = this.gameheight / 2 - this.height / 2;\r\n    this.screen_bottom_y = this.gameheight - this.height;\r\n\r\n    this.x_pos = this.screen_centered_x;\r\n    this.y_pos = this.screen_bottom_y - 10;\r\n\r\n    this.box_background_color = \"white\";\r\n    this.box_outline_color = \"black\";\r\n    this.default_font = \"20px Tahoma\";\r\n  }\r\n\r\n  update() {}\r\n\r\n  draw(ctx) {\r\n    // draw box to put info in\r\n    ctx.fillStyle = this.box_background_color;\r\n    ctx.textAlign = \"left\";\r\n    ctx.font = \"25px Tahoma\";\r\n\r\n    ctx.fillRect(this.x_pos, this.y_pos, this.width, this.height);\r\n    ctx.stroke();\r\n\r\n    // draw outline for box\r\n    ctx.fillStyle = this.box_outline_color;\r\n    ctx.strokeRect(this.x_pos, this.y_pos, this.width, this.height);\r\n    ctx.font = this.default_font;\r\n    ctx.fillText(this.box_title, this.x_pos + 10, this.y_pos + 30);\r\n    ctx.font = this.default_font;\r\n    ctx.fillText(\r\n      \"Customers Fed: \" + this.numFed,\r\n      this.x_pos + 10,\r\n      this.y_pos + 60\r\n    );\r\n    ctx.fillText(\r\n      \"Dollars Earned: \" + this.numCoins,\r\n      this.x_pos + 10,\r\n      this.y_pos + 90\r\n    );\r\n    ctx.fillText(\r\n      \"Clean up the Kitchen's Food, & then press SPACEBAR to end the business day.\",\r\n      this.x_pos + 10,\r\n      this.y_pos + 150\r\n    );\r\n  }\r\n}\r\n","//import { GAMESTATE } from \"/src/gameManager\";\r\n\r\nexport default class Portal {\r\n  // Class to represent coin objects\r\n  constructor(x, y, gotogamestate) {\r\n    this.image = document.getElementById(\"portal\");\r\n    this.gogamestate = gotogamestate;\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.height = 150;\r\n    this.width = 50;\r\n    this.marked_for_deletion = false;\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(this.image, this.x_pos, this.y_pos, this.height, this.width);\r\n  }\r\n\r\n  getGamestate() {\r\n    return this.gogamestate;\r\n  }\r\n}\r\n","export default class BeginDayPopup {\r\n  // Class to represent the popup at the end of a level\r\n  constructor(gamewidth, gameheight, daynumber, timerlength, taxamount) {\r\n    this.gamewidth = gamewidth;\r\n    this.gameheight = gameheight;\r\n    this.height = 200;\r\n    this.width = 800;\r\n\r\n    this.day_number = daynumber;\r\n    this.timer_length = timerlength;\r\n    this.tax_amount = taxamount;\r\n\r\n    this.screen_centered_x = this.gamewidth / 2 - this.width / 2;\r\n    this.screen_centered_y = this.gameheight / 2 - this.height / 2;\r\n    this.screen_bottom_y = this.gameheight - this.height;\r\n\r\n    this.x_pos = this.screen_centered_x;\r\n    this.y_pos = this.screen_bottom_y - 10;\r\n\r\n    this.box_background_color = \"white\";\r\n    this.box_outline_color = \"black\";\r\n    this.default_font = \"20px Tahoma\";\r\n\r\n    this.box_title = \"Good Morning & Congratulations!\";\r\n    this.box_line1 = \"You've made it to Day #\" + this.day_number + \".\";\r\n    this.box_line2 = \"Today's work day is \" + this.timer_length + \" seconds.\";\r\n    this.box_line3 =\r\n      \"At the end of day, the Tax office wants \" + this.tax_amount + \" COINS\";\r\n    this.box_line4 = \"Now, pick up the sushi to start,\";\r\n    this.box_line5 = \"and hope for a good day of business!\";\r\n  }\r\n\r\n  drawTextLine(ctx, line, linenum) {\r\n    ctx.fillText(line, this.x_pos + 10, this.y_pos + 30 * linenum);\r\n  }\r\n\r\n  draw(ctx) {\r\n    // draw box to put info in\r\n    ctx.fillStyle = this.box_background_color;\r\n    ctx.textAlign = \"left\";\r\n    ctx.font = \"25px Tahoma\";\r\n\r\n    ctx.fillRect(this.x_pos, this.y_pos, this.width, this.height);\r\n    ctx.stroke();\r\n\r\n    // draw outline for box\r\n    ctx.fillStyle = this.box_outline_color;\r\n    ctx.strokeRect(this.x_pos, this.y_pos, this.width, this.height);\r\n\r\n    ctx.font = this.default_font;\r\n    ctx.textAlign = \"left\";\r\n\r\n    this.drawTextLine(ctx, this.box_title, 1);\r\n    this.drawTextLine(ctx, this.box_line1, 2);\r\n    this.drawTextLine(ctx, this.box_line2, 3);\r\n    this.drawTextLine(ctx, this.box_line3, 4);\r\n    this.drawTextLine(ctx, this.box_line4, 5);\r\n    this.drawTextLine(ctx, this.box_line5, 6);\r\n  }\r\n}\r\n","export default class TaxMan {\r\n  // Class to represent coin objects\r\n  constructor(x, y, days_tax) {\r\n    this.image = document.getElementById(\"taxman1\");\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.width = 115 + 40;\r\n    this.height = 75 + 40;\r\n\r\n    this.popup_x = this.x_pos - 500;\r\n    this.popup_y = this.y_pos - 300;\r\n    this.popup_width = 600;\r\n    this.popup_height = 200;\r\n\r\n    this.line1 = \"Hello Clam. Today's tax is $\" + days_tax;\r\n    this.line2 =\r\n      \"Press spacebar to pay and we will ensure your spot in Maple Island\";\r\n    this.line3 = \"If you don't pay though, we cannot promise your protection\";\r\n    this.line4 = \"from the more... malevolent citizens...\";\r\n  }\r\n\r\n  drawTextLine(ctx, line, linenum) {\r\n    ctx.fillText(\r\n      line,\r\n      this.popup_x + this.popup_width / 2,\r\n      this.popup_y + 30 * linenum\r\n    );\r\n  }\r\n\r\n  drawPopup(ctx) {\r\n    ctx.fillStyle = \"#B3EFF7\";\r\n\r\n    ctx.fillRect(\r\n      this.popup_x,\r\n      this.popup_y,\r\n      this.popup_width,\r\n      this.popup_height\r\n    );\r\n    ctx.stroke();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.strokeRect(\r\n      this.popup_x,\r\n      this.popup_y,\r\n      this.popup_width,\r\n      this.popup_height\r\n    );\r\n\r\n    ctx.textAlign = \"center\";\r\n    ctx.font = \"20px Tahoma\";\r\n\r\n    this.drawTextLine(ctx, this.line1, 1);\r\n    this.drawTextLine(ctx, this.line2, 2);\r\n    this.drawTextLine(ctx, this.line3, 3);\r\n    this.drawTextLine(ctx, this.line4, 4);\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(this.image, this.x_pos, this.y_pos, this.width, this.height);\r\n  }\r\n\r\n  update(deltaTime) {\r\n    return;\r\n  }\r\n}\r\n","const UPGRADETYPES = {\r\n  MARKETING: 0, // increase customer spawn\r\n  LOGICSTICS: 1 //increase food cook time\r\n};\r\n\r\nexport default class UpgradeObject {\r\n  // Class to represent the popup at the end of a level\r\n  constructor(x, y, type, gamestats, kitchen) {\r\n    this.x_pos = x;\r\n    this.y_pos = y;\r\n    this.height = 200;\r\n    this.width = 100;\r\n    this.box_height = 200;\r\n    this.box_width = 1100;\r\n    this.box_x = 100;\r\n    this.box_y = 100;\r\n\r\n    this.type = type;\r\n    this.gamestats = gamestats;\r\n    this.kitchen = kitchen;\r\n    this.stat_level = 1;\r\n\r\n    switch (this.type) {\r\n      case 0:\r\n        this.cost = 4;\r\n        this.cost_increment = 4;\r\n        this.incrementseconds = -100;\r\n        this.stat_maxlevel = 20;\r\n        break;\r\n\r\n      case 1:\r\n        this.cost = 2;\r\n        this.cost_increment = 2;\r\n        this.incrementseconds = -100;\r\n        this.stat_maxlevel = 20;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  onHover(ctx) {\r\n    switch (this.type) {\r\n      case 0:\r\n        this.hovermsg1 = \"RESEARCH MARKETING - Increases rate of new customers\";\r\n        this.hovermsg2 =\r\n          \"CURRENT NEW CUST RATE: Chance of new customer vists every \" +\r\n          this.gamestats.custgen_time +\r\n          \" seconds\";\r\n        this.hovermsg3 =\r\n          \"CURENT LEVEL: \" + this.stat_level + \" NEXT LEVEL COST: \" + this.cost;\r\n        break;\r\n\r\n      case 1:\r\n        this.hovermsg1 = \"RESEARCH LOGISTICS - Increases cooking speed\";\r\n        this.hovermsg2 =\r\n          \"CURENT COOK SPEED: 1 Food cooked every \" +\r\n          this.kitchen.cook_time +\r\n          \" seconds\";\r\n        this.hovermsg3 =\r\n          \"CURENT LEVEL: \" + this.stat_level + \" NEXT LEVEL COST: \" + this.cost;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    ctx.textAlign = \"left\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(this.box_x, this.box_y, this.box_width, this.box_height);\r\n    ctx.stroke();\r\n    ctx.fillStyle = \"black\";\r\n\r\n    // write tax message\r\n    ctx.fillText(this.hovermsg1, this.box_x + 10, this.box_y + 30);\r\n    ctx.fillText(this.hovermsg2, this.box_x + 10, this.box_y + 60);\r\n    ctx.fillText(this.hovermsg3, this.box_x + 10, this.box_y + 90);\r\n  }\r\n\r\n  upgrade() {\r\n    switch (this.type) {\r\n      case 0:\r\n        // gamestats make spawn faster\r\n        if (\r\n          this.gamestats.dollars >= this.cost &&\r\n          this.stat_level < this.stat_maxlevel\r\n        ) {\r\n          this.gamestats.custgen_time =\r\n            this.gamestats.custgen_time + this.incrementseconds;\r\n          this.gamestats.dollars = this.gamestats.dollars - this.cost;\r\n          this.cost = this.cost + this.cost_increment;\r\n          this.stat_level = this.stat_level + 1;\r\n        }\r\n        break;\r\n\r\n      case 1:\r\n        // make food cook faster\r\n        if (this.gamestats.dollars >= this.cost) {\r\n          this.kitchen.cook_time =\r\n            this.kitchen.cook_time + this.incrementseconds;\r\n          this.gamestats.dollars = this.gamestats.dollars - this.cost;\r\n          this.cost = this.cost + this.cost_increment;\r\n          this.stat_level = this.stat_level + 1;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    // draw box to put info in\r\n    /**\r\n     * ctx.fillStyle = this.box_background_color;\r\n    ctx.fillRect(\r\n      this.x_pos,\r\n      this.y_pos,\r\n      this.width,\r\n      this.height\r\n    );\r\n    ctx.stroke();\r\n\r\n     */\r\n\r\n    // draw outline for box\r\n    ctx.fillStyle = this.box_outline_color;\r\n    ctx.strokeRect(this.x_pos, this.y_pos, this.width, this.height);\r\n  }\r\n}\r\n","import GameStats from \"/src/gameStats\";\r\nimport Clam from \"/src/clam\";\r\nimport InputHandler from \"/src/input\";\r\nimport Kitchen from \"/src/kitchen\";\r\nimport Customer from \"/src/customer\";\r\nimport Thug from \"/src/thug\";\r\nimport Coin from \"/src/coin\";\r\nimport Food from \"/src/food\";\r\nimport {\r\n  detectCollision,\r\n  detectOverlapCollision,\r\n  randomIntFromInterval,\r\n  detectRectCollision\r\n} from \"/src/gameMechanics\";\r\nimport { CUSTSTATE } from \"/src/customer\";\r\nimport { FOODSTATE } from \"/src/food\";\r\nimport { THIEFSTATE } from \"/src/thug\";\r\n\r\nimport TutorialPopup from \"/src/tutorialPopup\";\r\nimport EndDayPopup from \"/src/endDayPopup\";\r\nimport Portal from \"/src/portal\";\r\nimport BeginDayPopup from \"./beginDayPopup\";\r\nimport TaxMan from \"./taxMan\";\r\nimport UpgradeObject from \"./upgradeObject\";\r\n\r\nimport { CLAMSTATE } from \"./clam\";\r\n\r\nexport const GAMESTATE = {\r\n  BUSINESSDAY: 0,\r\n  NIGHT: 1,\r\n  MENU: 2,\r\n  TUTORIAL: 3,\r\n  ENDDAY: 4,\r\n  NEXTLEVEL: 5,\r\n  GAMEOVER: 6,\r\n  TAXHOUSE: 7,\r\n  INHOME: 8,\r\n  INCITY1: 9,\r\n  INHOOD_NIGHT: 10,\r\n  INHOOD_DAY: 11,\r\n  UPGRADEROOM: 12,\r\n  RESTO: 13,\r\n  INCITY2: 14\r\n};\r\n\r\nexport default class GameManager {\r\n  constructor(gameWidth, gameHeight, ctx) {\r\n    this.ctx = ctx;\r\n    this.GAME_WIDTH = gameWidth;\r\n    this.GAME_HEIGHT = gameHeight;\r\n\r\n    this.background = document.getElementById(\"background\");\r\n    this.night_bg = document.getElementById(\"night_bg\");\r\n    this.nighttown1 = document.getElementById(\"nighttown1\");\r\n    this.nighttown2 = document.getElementById(\"nighttown2\");\r\n    this.car = document.getElementById(\"car\");\r\n    this.hood_bg = document.getElementById(\"hood_bg\");\r\n    this.hood_bg_day = document.getElementById(\"hood_bg_day\");\r\n\r\n    this.clam = new Clam(this.GAME_WIDTH, this.GAME_HEIGHT);\r\n\r\n    new InputHandler(ctx, this.clam);\r\n    this.gamestate = GAMESTATE.MENU;\r\n    this.spacebarHandler();\r\n  }\r\n\r\n  start() {\r\n    // start new game\r\n    this.gameStats = new GameStats(this.GAME_WIDTH, this.GAME_HEIGHT);\r\n\r\n    this.bullets = [];\r\n    this.coins = [];\r\n    this.popups = [];\r\n    this.npcs = [];\r\n    this.customers = [];\r\n    this.thugs = [];\r\n    this.portals = [];\r\n    this.upgrades = [];\r\n    this.kitchen = new Kitchen(this.GAME_WIDTH, this.GAME_HEIGHT);\r\n\r\n    // For now, just start with game running\r\n\r\n    this.upgrades.push(\r\n      new UpgradeObject(800, 500, 0, this.gameStats, this.kitchen)\r\n    );\r\n    this.upgrades.push(\r\n      new UpgradeObject(400, 500, 1, this.gameStats, this.kitchen)\r\n    );\r\n  }\r\n\r\n  update(deltaTime) {\r\n    switch (this.gamestate) {\r\n      // ----- GAMESTATE = BUSINESSDAY -----\r\n      case GAMESTATE.BUSINESSDAY:\r\n        this.thugs = this.gameStats.thugs; // makes thug list inherit from gamestats\r\n        this.thugs.forEach((thug) => initializeThugRandomMovement(thug));\r\n        this.updateThugs();\r\n        this.thugs = this.thugs.filter((thug) => !thug.markfordelete);\r\n\r\n        this.kitchen.update(deltaTime);\r\n        // this.generateCustomers();\r\n        this.customers = this.customers.filter(\r\n          (customer) => !customer.markfordelete\r\n        );\r\n        this.customers = this.gameStats.custs; // makes customer list inherit from gamestats\r\n        this.updateCustomers(deltaTime);\r\n\r\n        this.checkClamGettingFood();\r\n        this.bullets = this.bullets.filter(\r\n          (bullet) => !bullet.marked_for_deletion\r\n        );\r\n        this.updateBullets(this.bullets, deltaTime);\r\n        this.coins = this.coins.filter((coin) => !coin.marked_for_deletion);\r\n        this.updateCoins(this.coins);\r\n        this.clam.update(deltaTime);\r\n\r\n        if (this.gameStats.business_day_timer <= 0) {\r\n          this.goToGamestate(GAMESTATE.ENDDAY);\r\n          console.log(\"TIMER UP\");\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.TAXHOUSE:\r\n      case GAMESTATE.INHOME:\r\n      case GAMESTATE.UPGRADEROOM:\r\n      case GAMESTATE.RESTO:\r\n        this.clam.update(deltaTime);\r\n        break;\r\n\r\n      case GAMESTATE.INCITY1:\r\n        this.clam.update(deltaTime);\r\n        if (this.clam.x_pos + this.clam.width >= this.GAME_WIDTH) {\r\n          this.goToGamestate(GAMESTATE.INCITY2);\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.INCITY2:\r\n        this.clam.update(deltaTime);\r\n        if (this.clam.x_pos <= 0) {\r\n          this.goToGamestate(GAMESTATE.INCITY1);\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.NIGHT:\r\n        this.clam.update(deltaTime);\r\n        if (this.clam.x_pos <= 0) {\r\n          this.goToGamestate(GAMESTATE.INHOOD_NIGHT);\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.INHOOD_NIGHT:\r\n        this.clam.update(deltaTime);\r\n        if (this.clam.x_pos + this.clam.width >= this.GAME_WIDTH) {\r\n          this.goToGamestate(GAMESTATE.NIGHT);\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.INHOOD_DAY:\r\n        this.clam.update(deltaTime);\r\n        if (this.clam.x_pos + this.clam.width >= this.GAME_WIDTH) {\r\n          this.goToGamestate(GAMESTATE.BUSINESSDAY);\r\n        }\r\n\r\n        break;\r\n\r\n      case GAMESTATE.ENDDAY:\r\n        this.kitchen.update(deltaTime);\r\n        this.updateCustomers(deltaTime);\r\n        this.coins = this.coins.filter((coin) => !coin.marked_for_deletion);\r\n\r\n        this.updateCoins(this.coins);\r\n        this.checkClamGettingFood();\r\n\r\n        this.thugs = this.gameStats.thugs; // makes thug list inherit from gamestats\r\n        this.thugs = this.thugs.filter((thug) => !thug.markfordelete);\r\n        this.updateThugs();\r\n\r\n        this.bullets = this.bullets.filter(\r\n          (bullet) => !bullet.marked_for_deletion\r\n        );\r\n        this.updateBullets(this.bullets, deltaTime);\r\n\r\n        this.clam.update(deltaTime);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.TUTORIAL:\r\n      case GAMESTATE.NEXTLEVEL:\r\n        // Show popup, update objects needed in tutorial\r\n        //this.kitchen.update(deltaTime);\r\n        this.checkClamGettingFood();\r\n        this.bullets = this.bullets.filter(\r\n          (bullet) => !bullet.marked_for_deletion\r\n        );\r\n        //this.updateBullets(this.bullets, deltaTime);\r\n        this.clam.update(deltaTime);\r\n\r\n        if (this.clam.x_pos + this.clam.width >= this.GAME_WIDTH) {\r\n          this.goToGamestate(GAMESTATE.BUSINESSDAY);\r\n          console.log(\"clam went to right, go to business day\");\r\n        }\r\n        break;\r\n\r\n      case GAMESTATE.GAMEOVER:\r\n        this.kitchen.update(deltaTime);\r\n        this.updateCustomers(deltaTime);\r\n        this.coins = this.coins.filter((coin) => !coin.marked_for_deletion);\r\n\r\n        this.updateCoins(this.coins);\r\n        this.checkClamGettingFood();\r\n\r\n        this.bullets = this.bullets.filter(\r\n          (bullet) => !bullet.marked_for_deletion\r\n        );\r\n        this.updateBullets(this.bullets, deltaTime);\r\n\r\n        this.clam.update(deltaTime);\r\n        break;\r\n\r\n      default:\r\n    }\r\n  }\r\n  draw(ctx) {\r\n    switch (this.gamestate) {\r\n      case GAMESTATE.BUSINESSDAY:\r\n      case GAMESTATE.ENDDAY:\r\n        ctx.drawImage(this.background, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        this.kitchen.draw(ctx);\r\n\r\n        [\r\n          ...this.popups,\r\n          ...this.customers,\r\n          ...this.thugs,\r\n          ...this.bullets,\r\n          ...this.coins\r\n        ].forEach((object) => object.draw(ctx));\r\n\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n        break;\r\n\r\n      case GAMESTATE.GAMEOVER:\r\n        ctx.drawImage(this.background, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        this.kitchen.draw(ctx);\r\n\r\n        [\r\n          ...this.customers,\r\n          ...this.thugs,\r\n          ...this.bullets,\r\n          ...this.coins,\r\n          ...this.popups\r\n        ].forEach((object) => object.draw(ctx));\r\n        this.customers.forEach((cust) => cust.draw(ctx));\r\n\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n        ctx.fillText(\"GAME OVER\", this.GAME_WIDTH / 2, this.GAME_HEIGHT / 2);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.NIGHT:\r\n        ctx.drawImage(this.night_bg, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n\r\n        ctx.drawImage(this.car, 600, 178);\r\n        let objectstodraw = [\r\n          this.kitchen,\r\n          this.clam,\r\n          this.gameStats,\r\n          ...this.bullets,\r\n          ...this.coins,\r\n          ...this.popups\r\n        ];\r\n        objectstodraw.forEach((object) => object.draw(ctx));\r\n        // Draw portals for buildings\r\n        this.npcs.forEach((npc) => npc.draw(ctx));\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        this.checkTaxMan(ctx);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.INHOOD_NIGHT:\r\n        ctx.drawImage(this.hood_bg, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        this.clam.draw(ctx);\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        this.gameStats.draw(ctx);\r\n        break;\r\n\r\n      case GAMESTATE.INHOOD_DAY:\r\n        ctx.drawImage(\r\n          this.hood_bg_day,\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n        break;\r\n\r\n      case GAMESTATE.INCITY1:\r\n        ctx.drawImage(this.nighttown1, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        ctx.drawImage(this.car, 1, 500);\r\n        [\r\n          ...this.popups,\r\n          this.clam,\r\n          ...this.portals,\r\n          this.gameStats\r\n        ].forEach((object) => object.draw(ctx));\r\n        break;\r\n\r\n      case GAMESTATE.INCITY2:\r\n        ctx.drawImage(this.nighttown2, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        ctx.drawImage(this.car, 1000, 520);\r\n        [\r\n          ...this.popups,\r\n          this.clam,\r\n          ...this.portals,\r\n          this.gameStats\r\n        ].forEach((object) => object.draw(ctx));\r\n        break;\r\n\r\n      case GAMESTATE.TAXHOUSE:\r\n        ctx.drawImage(\r\n          document.getElementById(\"taxroom\"),\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        this.npcs.forEach((npc) => npc.draw(ctx));\r\n        this.clam.draw(ctx);\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        ctx.fillText(\r\n          \"Taxes Paid - CLAM: \" + this.gameStats.daysTaxPaid,\r\n          500,\r\n          400\r\n        );\r\n\r\n        this.checkTaxMan(ctx);\r\n        this.gameStats.draw(ctx);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.INHOME:\r\n        ctx.drawImage(\r\n          document.getElementById(\"room\"),\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        // Draw square to represent bed\r\n        ctx.drawImage(\r\n          document.getElementById(\"bed\"),\r\n          this.GAME_WIDTH / 2,\r\n          this.GAME_HEIGHT / 2,\r\n          200,\r\n          300\r\n        );\r\n        ctx.fillText(\r\n          \"START NEXT DAY\",\r\n          this.GAME_WIDTH / 2,\r\n          this.GAME_HEIGHT / 2\r\n        );\r\n\r\n        this.clam.draw(ctx);\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        break;\r\n\r\n      case GAMESTATE.UPGRADEROOM:\r\n        ctx.drawImage(\r\n          document.getElementById(\"upgrade_room\"),\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        this.clam.draw(ctx);\r\n        this.upgrades.forEach((object) => object.draw(ctx));\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        this.upgrades.forEach((upgradeobj) => {\r\n          if (detectRectCollision(upgradeobj, this.clam)) {\r\n            console.log(\"clam collide upgradobj\");\r\n            upgradeobj.onHover(ctx);\r\n          }\r\n        });\r\n        this.gameStats.draw(ctx);\r\n        break;\r\n\r\n      case GAMESTATE.RESTO:\r\n        ctx.drawImage(\r\n          document.getElementById(\"restaurant\"),\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n        this.portals.forEach((object) => object.draw(ctx));\r\n        break;\r\n\r\n      case GAMESTATE.TUTORIAL:\r\n        // Draw objects needed for tutorial\r\n        ctx.drawImage(this.hood_bg, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        [...this.bullets, ...this.popups].forEach((object) => object.draw(ctx));\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.NEXTLEVEL:\r\n        ctx.drawImage(\r\n          this.hood_bg_day,\r\n          0,\r\n          0,\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT\r\n        );\r\n        [...this.bullets, ...this.popups].forEach((object) => object.draw(ctx));\r\n        this.clam.draw(ctx);\r\n        this.gameStats.draw(ctx);\r\n\r\n        break;\r\n\r\n      case GAMESTATE.MENU:\r\n        ctx.drawImage(this.background, 0, 0, this.GAME_WIDTH, this.GAME_HEIGHT);\r\n        ctx.font = \"40px Arial\";\r\n        ctx.fillStyle = \"white\";\r\n        ctx.textAlign = \"center\";\r\n\r\n        ctx.fillText(\r\n          \"Press SPACEBAR to start game\",\r\n          this.GAME_WIDTH / 2,\r\n          this.GAME_HEIGHT / 2 + 50\r\n        );\r\n        break;\r\n\r\n      default:\r\n    }\r\n  }\r\n\r\n  // ------------------ MESSY HELPER FUNCTIONS ------------------\r\n\r\n  eraseObjects() {\r\n    this.bullets = [];\r\n    this.coins = [];\r\n    this.customers = [];\r\n    this.kitchen.cooked_food = [];\r\n    this.clam.bullets_held = [];\r\n    this.popups = [];\r\n    this.portals = [];\r\n    this.npcs = [];\r\n    this.thugs = [];\r\n  }\r\n\r\n  spacebarHandler() {\r\n    // Actions for spacebar pressing to perform, based on gamestate\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (event.keyCode === 32) {\r\n        switch (this.gamestate) {\r\n          // ----- GAMESTATE = BUSINESSDAY -----\r\n          case GAMESTATE.BUSINESSDAY:\r\n            if (this.clam.bullets_held.length > 0) {\r\n              this.bullets.push(\r\n                new Food(this.clam.x_pos, this.clam.y_pos, this.clam.facing)\r\n              );\r\n              this.clam.bullets_held.shift(); // removes last item in array\r\n              this.clam.shooting = true;\r\n            }\r\n            break;\r\n\r\n          case GAMESTATE.MENU:\r\n            this.goToGamestate(GAMESTATE.TUTORIAL);\r\n            break;\r\n\r\n          case GAMESTATE.ENDDAY:\r\n            if (this.kitchen.cooked_food.length === 0) {\r\n              this.goToGamestate(GAMESTATE.NIGHT);\r\n            }\r\n            break;\r\n\r\n          case GAMESTATE.TAXHOUSE:\r\n            this.payTaxMan();\r\n            this.checkAndTriggerPortals(this.portals);\r\n            break;\r\n\r\n          case GAMESTATE.INHOME:\r\n          case GAMESTATE.INCITY1:\r\n          case GAMESTATE.INCITY2:\r\n          case GAMESTATE.RESTO:\r\n            this.checkAndTriggerPortals(this.portals);\r\n            break;\r\n\r\n          case GAMESTATE.NIGHT:\r\n            this.payTaxMan();\r\n            this.checkAndTriggerPortals(this.portals);\r\n            break;\r\n\r\n          case GAMESTATE.INHOOD_NIGHT:\r\n          case GAMESTATE.NEXTLEVEL:\r\n            this.popups = [];\r\n            this.checkAndTriggerPortals(this.portals);\r\n            break;\r\n\r\n          case GAMESTATE.TUTORIAL:\r\n            this.popups = [];\r\n            this.goToGamestate(GAMESTATE.INHOOD_DAY);\r\n            break;\r\n\r\n          case GAMESTATE.UPGRADEROOM:\r\n            this.checkAndTriggerPortals(this.portals);\r\n            // Check interaction with upgrade stations\r\n            this.upgrades.forEach((upgradeobj) => {\r\n              if (detectRectCollision(upgradeobj, this.clam)) {\r\n                console.log(upgradeobj);\r\n                upgradeobj.upgrade();\r\n              }\r\n            });\r\n\r\n            break;\r\n\r\n          case GAMESTATE.GAMEOVER:\r\n            this.eraseObjects();\r\n            this.gameStats.gameOver();\r\n            this.gamestate = GAMESTATE.MENU;\r\n\r\n            break;\r\n\r\n          default:\r\n          //\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  goToGamestate(gamestate) {\r\n    console.log(\"GAMESTATE: \" + this.gamestate);\r\n\r\n    // ----- ACTIONS TO TRANSITION TO GAMESTATE.BUSINESSDAY -----\r\n    if (gamestate === GAMESTATE.BUSINESSDAY) {\r\n      if (\r\n        this.gamestate === GAMESTATE.TUTORIAL ||\r\n        this.gamestate === GAMESTATE.NEXTLEVEL ||\r\n        this.gamestate === GAMESTATE.INHOOD_DAY\r\n      ) {\r\n        this.clam.x_pos = 1;\r\n      }\r\n      this.eraseObjects();\r\n      this.popups = [];\r\n      this.bullets = [];\r\n      this.customers = [];\r\n      this.coins = [];\r\n      this.gamestate = GAMESTATE.BUSINESSDAY;\r\n      initializeCooking(this.kitchen);\r\n      initializeTimer(this.gameStats);\r\n\r\n      initializeCustomers(this.gameStats);\r\n      initializeThugs(this.gameStats);\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.TUTORIAL) {\r\n      this.gamestate = GAMESTATE.TUTORIAL;\r\n      this.start();\r\n      // push 1 food for tutorial purposes\r\n      this.cookOneFood();\r\n      this.popups.push(\r\n        new TutorialPopup(\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT,\r\n          this.gameStats.business_day_timer,\r\n          this.gameStats.days_tax\r\n        )\r\n      );\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.ENDDAY) {\r\n      this.kitchen.cooking = false;\r\n\r\n      this.gameStats.timerOn = false;\r\n      this.gameStats.custgen_on = false;\r\n      this.gameStats.thuggen_on = false;\r\n\r\n      this.gamestate = GAMESTATE.ENDDAY;\r\n      this.popups.push(\r\n        new EndDayPopup(\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT,\r\n          this.gameStats.days_fedcusts,\r\n          this.gameStats.days_dollars,\r\n          this.gameStats.days_tax\r\n        )\r\n      );\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.NEXTLEVEL) {\r\n      this.eraseObjects();\r\n      this.gameStats.incrementLevel();\r\n      this.gamestate = GAMESTATE.NEXTLEVEL;\r\n      // throw new day popup\r\n      this.popups.push(\r\n        new BeginDayPopup(\r\n          this.GAME_WIDTH,\r\n          this.GAME_HEIGHT,\r\n          this.gameStats.day,\r\n          this.gameStats.business_day_timer,\r\n          this.gameStats.days_tax\r\n        )\r\n      );\r\n      this.cookOneFood();\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.GAMEOVER) {\r\n      this.gamestate = GAMESTATE.GAMEOVER;\r\n      this.eraseObjects();\r\n      this.kitchen.cooking = false;\r\n      this.gameStats.timerOn = false;\r\n    }\r\n\r\n    // ----- ACTIONS TO TRANSITION TO GAMESTATE.NIGHT -----\r\n    if (gamestate === GAMESTATE.NIGHT) {\r\n      // if clam came from Tax House, place him at taxhouse portal\r\n      if (this.gamestate === GAMESTATE.TAXHOUSE) {\r\n        this.clam.x_pos = this.GAME_WIDTH / 2 + 10;\r\n        this.clam.y_pos = this.GAME_HEIGHT - 150;\r\n      } else if (this.gamestate === GAMESTATE.INHOOD_NIGHT) {\r\n        this.clam.x_pos = 1;\r\n      } else if (\r\n        this.gamestate === GAMESTATE.INCITY1 ||\r\n        this.gamestate === GAMESTATE.INCITY2\r\n      ) {\r\n        this.clam.x_pos = 638;\r\n        this.clam.y_pos = 248;\r\n      }\r\n      this.eraseObjects();\r\n      this.gameStats.resetLevel();\r\n\r\n      this.gamestate = GAMESTATE.NIGHT;\r\n      this.portals.push(new Portal(620, 255, GAMESTATE.INCITY1));\r\n      this.npcs.push(new TaxMan(1000, 600, this.gameStats.days_tax));\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.INCITY1) {\r\n      if (this.gamestate === GAMESTATE.NIGHT) {\r\n        this.clam.x_pos = 5;\r\n        this.clam.y_pos = 550;\r\n      } else if (this.gamestate === GAMESTATE.INCITY2) {\r\n        this.clam.x_pos = this.GAME_WIDTH - this.clam.width;\r\n      } else if (this.gamestate === GAMESTATE.UPGRADEROOM) {\r\n        this.clam.x_pos = 445;\r\n        this.clam.y_pos = 550;\r\n      } else if (this.gamestate === GAMESTATE.RESTO) {\r\n        this.clam.x_pos = 800;\r\n        this.clam.y_pos = 550;\r\n      }\r\n\r\n      this.eraseObjects();\r\n      this.gamestate = GAMESTATE.INCITY1;\r\n      this.portals.push(new Portal(1, 570, GAMESTATE.NIGHT));\r\n      this.portals.push(new Portal(400, 570, GAMESTATE.UPGRADEROOM));\r\n      this.portals.push(new Portal(780, 570, GAMESTATE.RESTO));\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.INCITY2) {\r\n      if (this.gamestate === GAMESTATE.INCITY1) {\r\n        this.clam.x_pos = 1;\r\n      } else if (this.gamestate === GAMESTATE.TAXHOUSE) {\r\n        this.clam.x_pos = 720;\r\n        this.clam.y_pos = 580;\r\n      }\r\n      this.eraseObjects();\r\n      this.gamestate = GAMESTATE.INCITY2;\r\n      this.portals.push(new Portal(680, 590, GAMESTATE.TAXHOUSE));\r\n      this.portals.push(new Portal(1000, 590, GAMESTATE.NIGHT));\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.INHOOD_NIGHT) {\r\n      if (this.gamestate === GAMESTATE.NIGHT) {\r\n        this.clam.x_pos = this.GAME_WIDTH - this.clam.width;\r\n      }\r\n      this.eraseObjects();\r\n      this.portals.push(new Portal(480, 440, GAMESTATE.NEXTLEVEL));\r\n      this.gamestate = GAMESTATE.INHOOD_NIGHT;\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.INHOOD_DAY) {\r\n      this.eraseObjects();\r\n      this.gamestate = GAMESTATE.INHOOD_DAY;\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.TAXHOUSE) {\r\n      this.eraseObjects();\r\n      this.clam.x_pos = 60;\r\n      this.clam.y_pos = 730;\r\n      this.gamestate = GAMESTATE.TAXHOUSE;\r\n      this.portals.push(new Portal(50, 730, GAMESTATE.INCITY2));\r\n      this.npcs.push(new TaxMan(800, 665, this.gameStats.days_tax));\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.INHOME) {\r\n      this.eraseObjects();\r\n      this.gamestate = GAMESTATE.INHOME;\r\n      this.portals.push(\r\n        new Portal(950, this.GAME_HEIGHT - 450, GAMESTATE.NIGHT)\r\n      );\r\n      this.portals.push(new Portal(600, 600, GAMESTATE.NEXTLEVEL));\r\n      this.clam.x_pos = 1000;\r\n      this.clam.y_pos = this.GAME_HEIGHT - 450;\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.UPGRADEROOM) {\r\n      this.eraseObjects();\r\n      this.portals.push(new Portal(500, 742, GAMESTATE.INCITY1));\r\n      this.gamestate = GAMESTATE.UPGRADEROOM;\r\n      this.clam.x_pos = 540;\r\n      this.clam.y_pos = 730;\r\n    }\r\n\r\n    if (gamestate === GAMESTATE.RESTO) {\r\n      this.eraseObjects();\r\n      this.portals.push(new Portal(1000, 657, GAMESTATE.INCITY1));\r\n      this.gamestate = GAMESTATE.RESTO;\r\n      this.clam.x_pos = 1040;\r\n      this.clam.y_pos = 641;\r\n    }\r\n  }\r\n\r\n  updateBullets(deltaTime) {\r\n    //function to update bullets each loop\r\n    this.bullets.forEach((bullet, index) => {\r\n      for (var i = 0; i < this.customers.length; i++) {\r\n        let thecustomer = this.customers[i];\r\n        if (detectOverlapCollision(bullet, thecustomer)) {\r\n          // trigger food being eaten process if food has not yet\r\n          if (\r\n            bullet.state === FOODSTATE.SERVED &&\r\n            thecustomer.saturated === false\r\n          ) {\r\n            thecustomer.saturated = true;\r\n            this.foodBeingEaten(bullet, thecustomer);\r\n            bullet.state = FOODSTATE.BEINGEATEN;\r\n          }\r\n        }\r\n      }\r\n\r\n      bullet.update(deltaTime);\r\n    });\r\n  }\r\n\r\n  // TODO: revise customer gen logic\r\n  updateCustomers(deltaTime) {\r\n    // Updating and drawing customers each frame\r\n    this.customers.forEach((customer, index) => {\r\n      customer.update(deltaTime);\r\n\r\n      // Drop loot\r\n      if (customer.hunger_points <= 0) {\r\n        if (customer.state === CUSTSTATE.DROPPINGLOOT) {\r\n          this.dropCoin(customer);\r\n          this.gameStats.days_fedcusts++;\r\n          customer.state = CUSTSTATE.EXITING;\r\n        }\r\n      }\r\n      // Check collision with Bullets\r\n      for (var i = 0; i < this.bullets.length; i++) {\r\n        let thebullet = this.bullets[i];\r\n        if (detectOverlapCollision(thebullet, customer)) {\r\n          if (\r\n            customer.state === CUSTSTATE.ACTIVE &&\r\n            thebullet.state === FOODSTATE.SERVED\r\n          ) {\r\n            this.triggerCustEatingFood(customer, thebullet);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  updateThugs(deltaTime) {\r\n    let swingdelay = 200;\r\n    this.thugs.forEach((thug) => {\r\n      thug.update(this.gamestate);\r\n      if (\r\n        detectRectCollision(thug, this.clam) &&\r\n        thug.attacking === false &&\r\n        this.gamestate === GAMESTATE.BUSINESSDAY\r\n      ) {\r\n        thug.attacking = true;\r\n        thug.state = THIEFSTATE.ATTACKING;\r\n        thug.randomMovementOn = false;\r\n        thug.prepAttack();\r\n        setTimeout(function () {\r\n          thug.img = thug.img_attack2;\r\n        }, swingdelay);\r\n        setTimeout(function () {\r\n          thug.randomMovementOn = true;\r\n          thug.attacking = false;\r\n          thug.state = THIEFSTATE.WALKING;\r\n        }, 1000);\r\n\r\n        setTimeout(\r\n          function (clam, gamestats) {\r\n            if (clam.facing === -1) {\r\n              clam.pushed_right = true;\r\n            } else {\r\n              clam.pushed_left = true;\r\n            }\r\n            gamestats.lives = gamestats.lives - 1;\r\n          },\r\n          swingdelay,\r\n          this.clam,\r\n          this.gameStats\r\n        );\r\n        console.log(\"clam and thug hit\");\r\n        console.log(\"Clam's lives left: \" + this.gameStats.lives);\r\n        if (this.gameStats.lives <= 0) {\r\n          this.goToGamestate(GAMESTATE.GAMEOVER);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  updateCoins(coins) {\r\n    coins.forEach((coin) => {\r\n      if (detectCollision(coin, this.clam)) {\r\n        coin.marked_for_deletion = true;\r\n        // Accrue gameStats\r\n        this.gameStats.dollars = this.gameStats.dollars + coin.value;\r\n        this.gameStats.days_dollars = this.gameStats.days_dollars + coin.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  checkAndTriggerPortals(portals) {\r\n    // for each portal, if intersect with clam, go to portal.gamestate\r\n    portals.forEach((portal) => {\r\n      if (detectRectCollision(portal, this.clam)) {\r\n        console.log(portal);\r\n        this.goToGamestate(portal.getGamestate());\r\n        console.log(\"entered: \" + this.gamestate);\r\n      }\r\n    });\r\n  }\r\n\r\n  cookOneFood() {\r\n    this.kitchen.cooked_food.push(\r\n      new Food(\r\n        this.kitchen.x_pos + 40,\r\n        this.kitchen.y_pos + this.kitchen.truck_height - 80,\r\n        1,\r\n        FOODSTATE.INKITCHEN,\r\n        this.kitchen\r\n      )\r\n    );\r\n  }\r\n\r\n  triggerCustEatingFood(customer, bullet) {\r\n    // Actions for Customer to perform when they hit Food in game. Tried to refactor this to Cust object, coudln't get it to work.\r\n    customer.state = CUSTSTATE.EATING;\r\n\r\n    // Code to represent the customer \"eating\" the food\r\n    let eat_interval = setInterval(takeBite, 750);\r\n    function takeBite() {\r\n      customer.hunger_points = customer.hunger_points - bullet.hunger_fill;\r\n\r\n      if (customer.hunger_points <= 0) {\r\n        clearInterval(eat_interval);\r\n        console.log(\"Hunger depleted\");\r\n        customer.state = CUSTSTATE.DROPPINGLOOT;\r\n      }\r\n    }\r\n  }\r\n\r\n  // related to custEatingFood above\r\n  dropCoin(customer) {\r\n    // Function to make customer drop coin\r\n    this.coins.push(\r\n      new Coin(\r\n        customer.x_pos + customer.width / 2,\r\n        customer.y_pos + customer.height / 2,\r\n        customer.drop_value\r\n      )\r\n    );\r\n    console.log(\"dropCoin function activated\");\r\n  }\r\n\r\n  // silly code to make food shrink when hit\r\n  foodBeingEaten(bullet, customer) {\r\n    var intervalId = setInterval(biteShrink, 300);\r\n    function biteShrink() {\r\n      const shrinkAmount = 10;\r\n      bullet.size = bullet.size - shrinkAmount;\r\n      bullet.x_pos = bullet.x_pos + shrinkAmount / 2;\r\n      bullet.y_pos = bullet.y_pos + shrinkAmount / 2;\r\n\r\n      if (\r\n        customer.state === CUSTSTATE.DROPPINGLOOT ||\r\n        customer.state === CUSTSTATE.EXITING\r\n      ) {\r\n        clearInterval(intervalId);\r\n        bullet.marked_for_deletion = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // TODO: refactor out of gameManager. Maybe this can be a function in kitchen?\r\n  checkClamGettingFood() {\r\n    // Detect collision between clam and kitchen food\r\n    this.kitchen.cooked_food.forEach((food, index) => {\r\n      if (detectCollision(this.clam, food)) {\r\n        food.marked_for_deletion = true;\r\n        this.clam.newBullet();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkTaxMan(ctx) {\r\n    let taxguy = this.npcs[0];\r\n    if (this.gameStats.daysTaxPaid === false) {\r\n      if (detectRectCollision(this.clam, taxguy)) {\r\n        taxguy.drawPopup(ctx);\r\n      }\r\n    }\r\n  }\r\n\r\n  payTaxMan() {\r\n    let taxguy = this.npcs[0];\r\n    if (\r\n      this.gameStats.daysTaxPaid === false &&\r\n      this.gameStats.dollars >= this.gameStats.days_tax\r\n    ) {\r\n      if (detectRectCollision(this.clam, taxguy)) {\r\n        this.gameStats.daysTaxPaid = true;\r\n        this.gameStats.dollars =\r\n          this.gameStats.dollars - this.gameStats.days_tax;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initializeTimer(gameStats) {\r\n  // if day timer is not on, turn on, and count down. If 0, end day\r\n  if (gameStats.timerOn === false) {\r\n    var startDayTimer = setInterval(incrementTime, gameStats.advance_interval);\r\n    gameStats.timerOn = true;\r\n    function incrementTime() {\r\n      gameStats.business_day_timer--;\r\n      // If timer ends, end business day functions\r\n      if (gameStats.business_day_timer <= 0) {\r\n        clearInterval(startDayTimer);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initializeThugRandomMovement(thug) {\r\n  if (thug.randomMovementOn === false) {\r\n    thug.randomMovementOn = true;\r\n    var startRandomMovement = setInterval(\r\n      randomizeDirection,\r\n      thug.randomMovementInterval,\r\n      thug\r\n    );\r\n    function randomizeDirection(thug) {\r\n      if (thug.randomMovementOn === false) {\r\n        clearInterval(startRandomMovement);\r\n      }\r\n      let randomInt = randomIntFromInterval(1, 6);\r\n      // each roll outcome results in a different change in direction\r\n      if (randomInt === 1) {\r\n        thug.x_direction = 1;\r\n        thug.state = THIEFSTATE.WALKING;\r\n      } else if (randomInt === 2) {\r\n        thug.x_direction = 0;\r\n        if (thug.y_direction === 0) {\r\n          thug.state = THIEFSTATE.STANDING;\r\n        }\r\n      } else if (randomInt === 3) {\r\n        thug.x_direction = -1;\r\n        thug.state = THIEFSTATE.WALKING;\r\n      } else if (randomInt === 4) {\r\n        thug.y_direction = 1;\r\n        thug.state = THIEFSTATE.WALKING;\r\n      } else if (randomInt === 5) {\r\n        thug.y_direction = 0;\r\n        if (thug.x_direction === 0) {\r\n          thug.state = THIEFSTATE.STANDING;\r\n        }\r\n      } else if (randomInt === 6) {\r\n        thug.y_direction = -1;\r\n        thug.state = THIEFSTATE.WALKING;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initializeCustomers(gamestats) {\r\n  if (gamestats.custgen_on === false) {\r\n    var init_custs = setInterval(genCusts, gamestats.custgen_time);\r\n    gamestats.custgen_on = true;\r\n  }\r\n  function genCusts() {\r\n    if (gamestats.custgen_on === false) {\r\n      clearInterval(init_custs);\r\n    }\r\n\r\n    if (gamestats.activecust_length <= gamestats.activecust_maxlength) {\r\n      let rndInteger = randomIntFromInterval(1, 3);\r\n      console.log(rndInteger);\r\n      if (rndInteger === 1) {\r\n        gamestats.custs.push(new Customer(1200, 800));\r\n      } else if (rndInteger === 2) {\r\n        gamestats.custs.push(new Customer(1200, 800));\r\n        gamestats.custs.push(new Customer(1200, 800));\r\n      } else {\r\n        // no spawn\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction initializeThugs(gamestats) {\r\n  if (gamestats.thuggen_on === false) {\r\n    var init_thugs = setInterval(\r\n      genThugs,\r\n      gamestats.thuggen_time,\r\n      gamestats.thuggen_time\r\n    );\r\n    gamestats.thuggen_on = true;\r\n  }\r\n  function genThugs(time) {\r\n    if (gamestats.thuggen_on === false) {\r\n      clearInterval(init_thugs);\r\n    }\r\n    if (gamestats.activethug_length <= gamestats.activethug_maxlength) {\r\n      let rndInteger = randomIntFromInterval(1, 2);\r\n      console.log(\"thug roll: \" + rndInteger);\r\n      console.log(\"thuggen time\" + gamestats.thuggen_time);\r\n      if (rndInteger === 1) {\r\n        gamestats.thugs.push(new Thug(1200, 800));\r\n      } else {\r\n        //nospawn\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// intitialize cooking TODO: Clean up\r\nfunction initializeCooking(kitchen) {\r\n  if (kitchen.cooking === false) {\r\n    var kitchenCooking = setInterval(cookFood, kitchen.cook_time);\r\n    kitchen.cooking = true;\r\n  }\r\n\r\n  // cookfood interval function\r\n  function cookFood() {\r\n    // Cook a food bullet into the kitchen if space is available\r\n\r\n    // if this.cooking is false, then stop the kitchen cooking interval loop\r\n    if (kitchen.cooking === false) {\r\n      clearInterval(kitchenCooking);\r\n    }\r\n\r\n    if (kitchen.cooked_food.length < kitchen.max_food) {\r\n      // Generate random y point within food truck window\r\n      this.rndBinary = randomIntFromInterval(\r\n        kitchen.y_pos + kitchen.truck_height * (2 / 5), // top of truck window\r\n        kitchen.y_pos + kitchen.truck_height * (3 / 5) - 5 // bottom of truck window\r\n      );\r\n\r\n      kitchen.cooked_food.push(\r\n        // push new food item to food truck\r\n        new Food(\r\n          kitchen.x_pos + 30,\r\n          this.rndBinary,\r\n          1,\r\n          FOODSTATE.INKITCHEN,\r\n          this.kitchen\r\n        )\r\n      );\r\n    } else {\r\n    }\r\n  }\r\n}\r\n\r\n/* THIS FUNCTION IN THE GameManager class does not work: the gameStats.business_day_timer only increments one time and stops\r\n  initializeTimer() {\r\n    // if day timer is not on, turn on, and count down. If 0, clear timer\r\n    var startDayTimer = setInterval(\r\n      incrementTime(this.gameStats),\r\n      this.gameStats.advance_interval\r\n    );\r\n    function incrementTime(stats) {\r\n      stats.business_day_timer--;\r\n      // If timer ends, end business day functions\r\n      if (stats.business_day_timer <= 0) {\r\n        clearInterval(startDayTimer);\r\n      }\r\n      return stats.business_day_timer\r\n    }\r\n  }\r\n  */\r\n\r\n/*\r\n  clickToChangeGamestate(object, gamestate) {\r\n    document.addEventListener(\"click\", (event) => {\r\n      let rect = this.ctx.getBoundingClientRect();\r\n      this.click.x = event.clientX - rect.left;\r\n      this.click.y = event.clientY - rect.top;\r\n      console.log(this.click);\r\n    });\r\n    if (this.isIntersect(this.click, object)) {\r\n      this.gamestate = gamestate;\r\n    }\r\n  }\r\n\r\n  isIntersect(point, object) {\r\n    if (point.x > object.x_pos && point.x < object.x_pos + object.height) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n*/\r\n/*\r\n  generateCustomers() {\r\n    // reload customers array (temporary code, will flesh out cust gen)\r\n    if (this.customers.length < 4) {\r\n      this.customers.push(new Customer(this.GAME_WIDTH, this.GAME_HEIGHT));\r\n    }\r\n  }\r\n\r\n  generateThugs() {\r\n    if (this.thugs.length < 1) {\r\n      this.thugs.push(new Thug(this.GAME_WIDTH, this.GAME_HEIGHT));\r\n      console.log(this.thugs);\r\n    }\r\n  }\r\n  */\r\n","import GameManager from \"./gameManager\";\n\n// -------------- INITIALIZE GAME OBJECTS ----------------\nconst GAME_WIDTH = 1200;\nconst GAME_HEIGHT = 800;\nlet canvas = document.getElementById(\"canvas1\");\nlet ctx = canvas.getContext(\"2d\");\ncanvas.height = GAME_HEIGHT;\ncanvas.width = GAME_WIDTH;\n\nlet lastTime = 0;\nlet fpsInterval = 10; // one frame per X milliseconds\n\nlet game = new GameManager(GAME_WIDTH, GAME_HEIGHT, canvas);\n\n// --------------- MAIN GAMELOOP --------------------------\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  if (deltaTime < fpsInterval) {\n    // fps interval is not yet met-- do nothing;\n  } else {\n    // fps interval is met -- update game frames\n    lastTime = timestamp;\n\n    ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n    game.update(deltaTime);\n    game.draw(ctx);\n  }\n  requestAnimationFrame(gameLoop);\n}\n\n// ----------------------- RUN GAMELOOP -----------------------------\ngameLoop();\n\n//\n//\n//\n// ----------------- DEPRECATED INDEX.JS CODE IN CASE I'LL NEED IT AGAIN  --------------------------\n\n// --------------- IF GAME IS ACTIVE --------------------------\n/*\n    if (gameStats.game_active === true) {\n      // update and draw kitchen objects\n      ctx.drawImage(background, 0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n      kitchen.update();\n      kitchen.draw(ctx);\n\n      if (\n        // if level start window is active and has not been triggered, add the start window popup to popups array\n        gameStats.show_lvlstart_window === true &&\n        gameStats.triggered_lvlstart_window === false\n      ) {\n        initializeLevelStartPopup();\n      }\n\n      // --------------- IF BUSINESS DAY IS ACTIVE --------------------------\n\n      if (gameStats.business_day_active === true) {\n        // Game actions only to occur if business day is active\n\n        // Perform the kitchen cooking loop\n        initializeKitchen(kitchen);\n        initializeTimer();\n\n        // update and draw customer objects\n        customers = customers.filter((customer) => !customer.markfordelete);\n        updateCustomers(customers, deltaTime);\n      }\n      // --------------- END IF BUSINESS DAY IS ACTIVE --------------------------\n\n      // check if clam is over a food\n      checkClamGettingFood();\n\n      //update and draw coin objects\n      coins = coins.filter((coin) => !coin.marked_for_deletion);\n\n      coins.forEach((coin, index) => {\n        if (detectCollision(coin, clam)) {\n          coin.marked_for_deletion = true;\n          // Accrue gameStats\n          gameStats.dollars = gameStats.dollars + coin.value;\n          gameStats.days_dollars = gameStats.days_dollars + coin.value;\n        }\n        coin.draw(ctx);\n        console.log(\"drawing coins\");\n      });\n\n      // update and draw bullets\n      bullets = bullets.filter((bullet) => !bullet.marked_for_deletion);\n      updateBullets(bullets, deltaTime);\n\n      // update and draw clam character\n      clam.update(deltaTime);\n      clam.draw(ctx);\n\n      // draw popup boxes\n      popups.forEach((popup) => {\n        popup.draw(ctx);\n      });\n\n      // update and draw game score, lives, other stats\n      gameStats.draw(ctx);\n    }\n    // --------------- END OF (IF GAME IS ACTIVE) --------------------------\n    \n    */\n\n// ----------------- HELPER FUNCTIONS --------------------------\n\n/*\n\nexport function spacebarTrigger() {\n  // Perform activites for when spacebar is pressed\n  while (true) {\n    // if levelstart popup window is present, pressing space bar will start level\n    if (gameStats.show_lvlstart_window === true) {\n      startBusinessDay();\n      gameStats.show_lvlstart_window = false;\n      break;\n    }\n\n    if (gameStats.taxPaidSuccessfully === true) {\n      // if tax is paid and spacebar is pressed, proceed to night time\n      startNightTime();\n      gameStats.taxPaidSuccessfully = false;\n      break;\n    }\n\n    if (gameStats.night_time_active === true) {\n      // If nighttime is active and spacebar is pressed, go to next day\n      gameStats.show_lvlstart_window = true;\n      gameStats.night_time_active = false;\n      console.log(\"close night time, trigger next day\");\n      break;\n    }\n\n    if (gameStats.dollars < 0) {\n      // If user is on fail-game popup window \"press spacebar to restart\"\n      hitBankrupcy();\n      popups = [];\n      gameStats.timeToRestart = false;\n      break;\n    }\n\n    if (gameStats.show_lvlend_window === true) {\n      // If level end window is showing and spacebar is pressed, clear popups and start nightime\n      gameStats.show_lvlend_window = false;\n      popups = [];\n      console.log(\"close level end window, activate night\");\n      console.log(gameStats.show_lvlstart_window);\n      payTax();\n      break;\n    }\n\n    // if clam bullet length > 0, fire bullet\n    if (clam.bullets_held.length > 0) {\n      bullets.push(new Food(clam.x_pos, clam.y_pos, clam.facing));\n      clam.bullets_held.shift(); // removes last item in array\n      break;\n    }\n  }\n}\n\nfunction startBusinessDay() {\n  //actions to take when level is started\n  gameStats.triggered_lvlstart_window = false;\n  popups = [];\n  gameStats.business_day_active = true;\n}\n\nfunction startNightTime() {\n  // actions to take when night time is started\n  popups = [];\n  gameStats.night_time_active = true;\n  gameStats.incrementLevel();\n}\n\nfunction payTax() {\n  // Pay tax after business day ends, continue or end game\n  gameStats.dollars = gameStats.dollars - gameStats.days_tax;\n  if (gameStats.dollars >= 0) {\n    var msg1 =\n      \"You successfully paid the day's tax & now have \" +\n      gameStats.dollars +\n      \" coins\";\n    var msg2 = \"Press SPACEBAR to continue to night time\";\n    popups.push(new TwoLinePopup(GAME_WIDTH / 2, GAME_HEIGHT / 2, msg1, msg2));\n    gameStats.taxPaidSuccessfully = true; // flag for spacebar action\n  } else {\n    var msg1 =\n      \"You were not able to pay the day's tax, and have gone bankrupt.\";\n    var msg2 = \"Press SPACEBAR to continue.\";\n    popups.push(new TwoLinePopup(GAME_WIDTH / 2, GAME_HEIGHT / 2, msg1, msg2));\n  }\n}\n\nfunction hitBankrupcy() {\n  gameStats.gameOver();\n  gameStats.game_active = true;\n  gameStats.show_lvlstart_window = true;\n  console.log(\"hitBankrupcy() triggered, game over\");\n}\n\nfunction initializeLevelStartPopup() {\n  // actions to take when level is started but the popup is not initialized\n  gameStats.triggered_lvlstart_window = true;\n  popups.push(\n    new BeginDayPopup(\n      GAME_WIDTH,\n      GAME_HEIGHT,\n      gameStats.day,\n      gameStats.business_day_timer,\n      gameStats.days_tax\n    )\n  );\n}\n\nfunction initializeTimer() {\n  // if day timer is not on, turn on, and count down. If 0, end day\n  if (gameStats.timerOn === false) {\n    var startDayTimer = setInterval(incrementTime, gameStats.advance_interval);\n    function incrementTime() {\n      gameStats.business_day_timer--;\n      // If timer ends, end business day functions\n      if (gameStats.business_day_timer <= 0) {\n        endBusinessDay();\n        clearInterval(startDayTimer);\n      }\n    }\n    gameStats.timerOn = true;\n  }\n}\n\nfunction endBusinessDay() {\n  // END OF BUSINESS DAY BEHAVIORS\n  gameStats.business_day_active = false;\n  kitchen.cooking = false;\n  popups.push(\n    new EndDayPopup(\n      GAME_WIDTH / 2,\n      GAME_HEIGHT / 2,\n      gameStats.days_fedcusts,\n      gameStats.days_dollars,\n      gameStats.days_tax\n    )\n  );\n  gameStats.show_lvlend_window = true;\n  gameStats.resetLevel();\n}\n\nfunction checkClamGettingFood() {\n  // Detect collision between clam and kitchen food\n  kitchen.cooked_food.forEach((food, index) => {\n    if (detectCollision(clam, food)) {\n      food.marked_for_deletion = true;\n      clam.bullets_held.push(new FoodSprite(clam.x_pos, clam.y_pos));\n    }\n  });\n}\n\nfunction initializeKitchen(kitchen) {\n  // Start kitchen and begin cooking food\n  if (kitchen.cooking === false) {\n    var kitchenCooking = setInterval(cookFood, kitchen.cook_time);\n    kitchen.cooking = true;\n  }\n  function cookFood() {\n    // Cook a food bullet into the kitchen if space is available\n\n    if (kitchen.cooked_food.length < kitchen.max_food) {\n      // Generate random y point within food truck window\n      this.rndBinary = randomIntFromInterval(\n        kitchen.y_pos + kitchen.truck_height * (2 / 5), // top of truck window\n        kitchen.y_pos + kitchen.truck_height * (3 / 5) - 5 // bottom of truck window\n      );\n\n      kitchen.cooked_food.push(\n        // push new food item to food truck\n        new Food(kitchen.x_pos + 30, this.rndBinary, 1, true, this.kitchen)\n      );\n    }\n\n    if (kitchen.cooking === false) {\n      clearInterval(kitchenCooking);\n    }\n  }\n}\n\nfunction updateBullets(bullets, deltaTime) {\n  //function to update bullets each loop\n  bullets.forEach((bullet, index) => {\n    customers.forEach((customer, index) => {\n      if (detectOverlapCollision(bullet, customer)) {\n        // if bullets are colliding:\n        // trigger customer eating process if customer has not yet begun\n        if (customer.hit === false) {\n          custEatingFood(bullet, customer, coins);\n        }\n        // trigger food being eaten process if food has not yet\n        if (bullet.food_hit === false) {\n          foodBeingEaten(bullet, customer);\n        }\n      }\n    });\n    // Detect collision between bullet and clam\n    if (detectCollision(bullet, clam) && bullet.pickupable === true) {\n      clam.bullets_held.push(new FoodSprite(clam.x_pos, clam.y_pos));\n      bullet.marked_for_deletion = true;\n    }\n\n    bullet.update(deltaTime);\n    bullet.draw(ctx);\n  });\n}\n\nfunction dropCoin(customer, coins) {\n  // Function to make customer drop coin\n  coins.push(\n    new Coin(\n      customer.x_pos + customer.width / 2,\n      customer.y_pos + customer.height / 2\n    )\n  );\n  console.log(\"dropCoin function activated\");\n  console.log(coins);\n}\n\nfunction updateCustomers(customers, deltaTime) {\n  // Updating and drawing customers each frame\n  customers.forEach((customer, index) => {\n    customer.update(deltaTime);\n    customer.draw(ctx);\n  });\n  // reload customers array (temporary code, will flesh out cust gen)\n  if (customers.length < 3) {\n    customers.push(new Customer(GAME_HEIGHT, GAME_WIDTH));\n  }\n}\n\nfunction custEatingFood(bullet, customer, coins) {\n  // Actions for Customer to perform when they hit Food in game\n  customer.hit = true;\n  customer.hitFood(bullet);\n\n  // Code to represent the customer \"eating\" the food\n  var eatTime = setInterval(custEat, 750);\n  function custEat() {\n    const fill_points = 1;\n    customer.hunger_points = customer.hunger_points - fill_points;\n\n    if (customer.hunger_points <= 0) {\n      // drop coin if customer hasnt yet\n      if (customer.done_dropping_coin === false) {\n        dropCoin(customer, coins);\n        customer.done_dropping_coin = true;\n      }\n\n      clearInterval(eatTime);\n      // accrue GameStats stats\n      gameStats.days_fedcusts++;\n    }\n  }\n}\n\nfunction foodBeingEaten(bullet, customer) {\n  bullet.food_hit = true;\n  bullet.hitCustomer(customer);\n\n  var intervalId = setInterval(biteShrink, 750);\n\n  function biteShrink() {\n    const shrinkAmount = 25;\n    bullet.size = bullet.size - shrinkAmount;\n    bullet.x_pos = bullet.x_pos + shrinkAmount / 2;\n    bullet.y_pos = bullet.y_pos + shrinkAmount / 2;\n\n    if (bullet.size <= 0) {\n      clearInterval(intervalId);\n    }\n  }\n}\n\n*/\n"]}